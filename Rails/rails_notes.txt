----------------------------------------RAILS----------------------------------------------


RUBY ON RAILS - 
	- open source web application framework
	- written in RUBY
	- created in 2003 by DAVID HEINEMEIER HANSSON ['DHH']
	- released as open source in 2004


RAILS - 
	- set of web framework 
	  [framework => prewritten code and libraries that developer can use to handle common tasks and solve 
	  re-occuring problems]

	- follows DRY code (Don't repeat yourself)
	  [idea - every peice of information should be written only once and can be refered where ever needed]
	  [pros - concise,consistant and easily maintainable code]

	- follows Convention Over Configuration
	  [idea - rather than configuring again and again ,use pre configured functions with default setting for 
	  general purpose and if some specification neede the perconfigured function can be overwritten according 
	  to the preference]
	  [pros - speed up development process]
	
	- most coding done in app folder, config used to describe configurations like routes,database,etc.


MVC ARCHITECTURE - 
	- M - MODEL [refers to the data objects we use in the application]
	  V - VIEW [refers to presentation layer, how data is presented to the user]
	  C - CONTROLLER [processes and responds to user's events]

	- Basic Web Architecture 
	 	[BROWSER] <=> [PAGE] <=> [DATABASE]

	- MVC Web Architecture
		[BROWSER] <=> [CONTROLLER] <=> [MODEL] <=> [DATABASE]
		       ^\     /.
			     [VIEW]
		 - browser sends info to controller which fetched info from database through model
		 - once info recieved , the indo is sent to view by controller and is then finally displayed on browser

		 - here contoller (handles decisions) , model (handles data) , view (handles presentation)
		 - in RAILS , code library for controller -> ActionController , model -> ActiveRecord , view -> ActionView
		   [controller and view can be packed, as they are very related, into -> ActionPack]
	
INSTALLATION - 

	- $curl -sSL https://get.rvm.io -o rvm.sh
	- $less /tmp/rvm.sh
	- $cat /tmp/rvm.sh | bash -s stable --rails
	- $source /home/sammy/.rvm/scripts/rvm

NEW PROJECT - 

	- $rails new <project_name> -d <database_name>
	  [if run bundle install not working, open the project_name directory
		do - 
		$gem install pg
		$gem update --system
		$gem update bundler
		$bundle install			]

OPENING BROWSER - 

	- $rails server [or] $ rails s
	  [creates server]

CREATING BASIC DATABASE - 

	- $rails db:create
	  [creates necessary database]

GENEREATING CONTROLLER - 

	- $rails generate [or] $rails g
	  [tells us what all it can generate]

	- $rails generate controller
	  [asks us to provide more details and also provides us with options available]

	- $rails generate controller Demo index
	  [generate controller Demo and view index]
	  ['index' is basically a function/method that controller would perform and when put inside controller class it is called an action that controller will perform]
	
SERVER REQUEST HANDELING - 

	- Actual ROR Architecture - 
											(RAILS FRAMEWORK)		
		[BROWSER]<=>[WEB SERVER]<=>[PUBLIC]=>[ROUTER]
						^						|.
						|					[CONTROLLER]
						|				       |.    |.
						-------------------[VIEWS] [MODELS]<=>[DATABASE]

	- Newly added items - ROUTER and PUBLIC
	- the files in public directory can be directly accessed by anyone

ROUTES - 

	- when web server can't find the requested file in the public directory,then sends rewuest to routing portion of the framework,which further
	  examines what conroller and action to be called (done by using definitions of route.rb file present in config folder)
	- main point of rounting - to identify how a url string works

	- ROUTES TYPES - 
			- SIMPLE MATCH ROUTE - 
				- get 'demo/index'
				  [simply matches the controller and the action][mostly used]
			- DEFAULT MATCH ROUTE - 
				- basic structure - :controller/:action/:id
				- example - get ':controller(/:action(/:id))
				  [they act as variable name and help match pattern]
			- ROOT MATCH ROUTE - 
				- purpose - routes request to the controller when no controller or action is specified 
				- acts as a home page
				- syntax - root 'demo#index'
		
RENDER A TEMPLATE - 

	- (examining how controller and view works,and how can we add dynamic content to it)
	- essential part of Architecture includes browser,controller and view

	- request-respond loop main parts include route,controller action and view template

	- Render template syntax - 
			- controller primarily picks the template by matching the current controller and message by default 
			- to do it manualy 'render' command is used inside current controller 
				   render (:template => 'demo/hello')
			  [or] render ('demo/hello')
			  [or] render ('hello')  [used if to be done inside current controller]
			- main purpose - to define what view to open when a certain url is requested 

REDIRECT ACTIONS - 
	- controller can respond to the rendering view but can also send them to another controller/action
	  (i.e. when requesting some url the controller has capability to redirect it to some other controller ot action)
	- example - for some user's request, we first need to check if he/she has logged in or not , then we can design it such way that when user's request is processed ,
				it opens login page first.(we want the url to change)
	
	- HTTP Redirect -
			- when we redirect ,rails put status code to browser[when browser recieves request got the mentioned url, it goes back to route to identify what to view]
	- Rails Redirect - 
			- syntax - 
					     redirect_to(:controller=>'demo',:action=>'index')
					[or] redirect_to(controller:'demo',action:'index')
					[or] redirect_to (action:'index') [if redirecting in same directory]
			- it can redirect to anywhere, location not limited to the currect application

VIEW TEMPLATES - 

	- ERB - Embeded Ruby 
		- it is a template system to embed Ruby
		- in file name hello.html.erb , the file is processed with erb and output format is html
		- correct erb tag is to be used in order to tell ruby what it should put in code
		- syntax - <% code %>
			  [or] <%= code%>   [= prints output of the code , here puts and print doesn't work]
		- example - <% 3.times do |n| %>
					<p><%= n %></p>
					<% end %>

INSTANCE VARIABLE - 

	- primary responsibility of controller is to gather data from model and database, and make it available for view templaate to view it on browser
	- controller sets everything ahead of time so that view can focus on presentation only
	- to pass data from controllerto view , we use 'instance variables'
	- these instance variable have scope throughout the instance of the ruby class[once called can be accessed from other methods of the same class]
	  [here object is instance od controller class]
	- syntax - @variable
	- when ruby randers a template it gathers up all instance variables and make them available for the template[regular will not be available]

LINKS - 

	- basic syntax - <a href = "/demo/index">Click me </a>     [html version]
	- easier syntax - <%= link_to("Click me","path") %>        [ruby version]
		[path can be written in form "/demo/index" [or] {:controller => "demo", :action => "index"} [or] {:action => "index} if same controller]
	- Working - when cliked on "Click me ", the browser sends request using the string to web server and request is passed by routes and sent 
				to correct controller and action

URL PARAMENTERS - 

	- values helping us to access a paricular part(maybe in a multipage list) 
	- if using link_to method, then can simply be put inside hash code 
	  like - {:controller=>'demo',:action=>'index',id=>20,page=4}
	  [rails convert it into url string, it helps us gather controller and action and as well as parameters so you can have easy access to them]
	- rails puts these parameters into special objects called 'params'
	  [it also puts GET(parameters from url) and POST(submitted by web forum) values in it]
	- params can be considered as a hash with come special features - 
		a value in params can be accessed either by params['id'] or params[:id]

MANAGING DATABASE TABLES - 

	three ways - 
	- using legacy database tables(i.e. using existing tables and making it interact whith ror application)
	- managing tables manualy
	- using Ruby on Rails migerations

MIGRATIONS - 

	- it is a set of database instructions written in ruby
	- helps migrate data from one state to another(staging changes made)
	- contain instruction to move "up" (to next state) or "down" (to previous state) in a database
	- ADVANTAGES - 
			- keeps databse schema with application code
			- executable and repeatable
			- allow sharing schema (allow sahring migration file)
			- allow writing in ruby instead of SQL
			- able to access project code
	- GENERATING MIGRATION - 
			-$rails generate migration Migrationname [generates migration]
			-$rails generate model User first_name:string last_name:string email:string[generates model with specified column name and what data they can have]
	- RUNNING MIGRATIONS - 
			- $rails db:migrate [rails run all migerations that have not been run yet]
					output- == 20240417115704 CreateSubjects: migrating ===================================
							-- create_table(:subjects)
							-> 0.1429s
							== 20240417115704 CreateSubjects: migrated (0.1431s) ==========================

							== 20240417120130 CreatePages: migrating ======================================
							-- create_table(:pages)
							-> 0.1600s
							== 20240417120130 CreatePages: migrated (0.1602s) =============================


			- $rails db:migrate:status [tell the status of what is in up and what is in down]
					output- 
							Status   Migration ID    Migration Name
							--------------------------------------------------
							up     20240417103927  Do nothing yet
							up     20240417104455  Create users
							up     20240417115704  Create subjects
							down    20240417120130  Create pages


			- $rails db:migrate VERSION=0 [undoes all the migration]
					output- == 20240417115704 CreateSubjects: reverting ===================================
							-- drop_table(:subjects)
							-> 0.0051s
							== 20240417115704 CreateSubjects: reverted (0.0187s) ==========================

							== 20240417104455 CreateUsers: reverting ======================================
							-- drop_table(:users)
							-> 0.0083s
							== 20240417104455 CreateUsers: reverted (0.0086s) =============================

							== 20240417103927 DoNothingYet: reverting =====================================
							== 20240417103927 DoNothingYet: reverted (0.0000s) ============================

			- $rails db:migrate VERSION=346746987297 [undeos till that version]
					output- == 20240417120130 CreatePages: reverting ======================================
							-- drop_table(:pages)
							-> 0.0171s
							== 20240417120130 CreatePages: reverted (0.0562s) =============================



















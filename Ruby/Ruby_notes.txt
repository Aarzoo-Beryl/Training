----------------------------------------------------RUBY---------------------------------------------------

VERSION - 3.1.2

GENERAL DETAILS - 

    - scripting language designed by Martz(Yukihiro Matsumoto) in 1993 in Japan
    - pure object oriented programming language
    - has features similar to Python,Perl and Smalltalk
    - open-source and general purpose interpreted programming language
    - can be used to write CGI scripts
    - can be embedded into html
    - very scalable, big programs can be easily managed
    - supports GUI tools and can be easily connected to SQL servers
    - contains rich set of built-in functions

IRB - stands for interactive ruby, opens space to write code

WHITESPACES - 
    - generally ignored (except in case of string)
    - used to interpret unambiguous statements (will produce warning if -w is used)
    - a+b(here a is a local varial and will result in (a+b))
    - a +b (here a acts as a method call and the result will be in the form a(+b))

ENDING - 
    - END - ; or nextline character
    - CONTINUE - + or - or \

IDENTIFIERS - are the name of variables,constants and methods
    - case sensitive in ruby(i.e Ram and RAM are different)
    - can consist of alphanumeric character and underscore (_)

RESERVED WORDS - 

    - BEGIN - Defines code to be executed when a Ruby script begins.
    - END - Defines code to be executed when a Ruby script ends.
    - alias - Creates an alias for a method or global variable.
    - and - Logical operator similar to &&.
    - begin - Starts a block of code for exception handling.
    - break - Exits a loop or a block of code.
    - case - Defines a case statement for conditional branching.
    - class - Defines a class in Ruby.
    - def - Defines a method.
    - defined? - Checks if a variable, method, or expression is defined.
    - do - Begins a block of code.
    - else - Part of the conditional branching structure.
    - elsif - Part of the conditional branching structure, similar to else if.
    - end - Marks the end of a block of code.
    - ensure - Defines a block of code to be executed regardless of whether an exception is raised or not.
    - false - Boolean value representing false.
    - for - Begins a loop.
    - if - Begins a conditional statement.
    - in - Used in iterations to specify the range or collection.
    - module - Defines a module in Ruby.
    - next - Skips to the next iteration in a loop.
    - nil - Represents absence of a value.
    - not - Logical negation operator.
    - or - Logical operator similar to ||.
    - redo - Restarts a loop or iteration from the beginning.
    - rescue - Handles exceptions in Ruby.
    - retry - Retries a block of code.
    - return - Exits a method and returns a value.
    - self - Refers to the current object or context.
    - super - Calls a method from a superclass.
    - then - Part of the conditional branching structure.
    - true - Boolean value representing true.
    - undef - Removes a method definition.
    - unless - Part of the conditional branching structure, similar to if not.
    - until - Begins a loop that continues until a condition is true.
    - when - Part of the case statement.
    - while - Begins a loop that continues while a condition is true.
    - yield - Passes control and arguments to a block. 

HERE DOCUMENT - 
    - used to define multiline string in ruby code,often used when embedding of large portion of text is required
    - allows you to easilt specify a block of text without needing to worry about their formatting
    syntax - 
            <<-DELIMETER
                line1
                line2...
            DELIMETER
        #here <<- indicates the start of the here document
        #DELIMETER specifies after which the document begins and where is ends
        #operators/mathematical expresions can be specifies into the main text by using "#" before it,it maked them treat like a code of ruby

    different ways of writing delimeter -
        - DELIMETER and "DELIMETER" - treats the content in it as string
            example - print <<beryl
                        its a good company
                        i like woking here
                      beryl
                OR 
            example - print <<"beryl"
                        its a good company
                        i like working here
                      beryl

            o/p -   its a good company
                    i like woking here
                    => nil


        - `DELIMETER` - treats the content in it as code and is used to execute COMMANDS
            example -   print <<`beryl`
                        echo how are you?
                        echo i'm good
                        beryl

            o/p -   hello
                    how are you
                    => nil


        - <<"DELIMETER" <<"delimeter" - used to stack documents
            example -   print <<-beryl, <<`beryl`
                            i love this company
                        beryl
                            echo hello
                            echo how are you
                        beryl

            o/p -   i love this company
                    hello
                    how are you
                    => nil



CLASSES AND OBJECTS - 
    - CLASS is a blueprint from which individual OBJECTS are created

    DEFINING CLASS
        syntax - class class_name
                end
        example - 
                    class Customer
                        @@no_of_customers = 0

                        def initialize(id, name, addr)
                            @cust_id = id
                            @cust_name = name
                            @cust_addr = addr
                        end
                    end

    FEATURES OF OOPS LANGUAGE - 
        
        DATA ENCAPSULATION - refers to the bundeling of data and the methods that operate on data into the single unit(object)
                           - done by classes(ecapsulate bothe data and behaviour)
                           - helps hide unnecessary details and display only the required ones

        DATA ABSTRACTION - refers to hiding unnecessary details and showing only required ones
                         - done basically by encapsulation , by defining public methods that act as ine\terface to manipulate internal state of object
                         - allows user to interact with the objects in simplified manner without needing the understanding of the implimentation details 

        POLYMORPHISM - allows objects of different classes to be treaated as object of same uper class
                     - achieved through method overriding(allowing subclasses to their own implementationof method difined in the super class) and overloading(allows method with same name but different parameters to coexist within a class or its subclasses)
                     - this flexibility enables objects to exibit different behaviour based on their specific types 

        INHERITANCE - allows subclasses to inherit attributes from superclass/parent class
                    - implemented using "<" and then the name or the superclass in the class definition
                    - this helps inherit all the instance variable, methods, and behaviour allowing them to reuse code and extend functionality
                    - creates a hierarical relationship between classes, where specialized inherit from general ones

    CREATING OBJECTS - 
        syntax - object_name = class_name.new(parameters)

    MEMBER FUNCTION - also known as mothods or functions, always assigned inside a class and starts with "def" and the name is always sprecified in lowercase letters and ends with "end"
        syntax - class class_name
                    def function_name
                        statement1
                        statement2
                    end
                 end



CASE STUDY - 

    Code - 
            class Customer
                @@no_of_customers = 0

                def initialize(id, name, addr)
                    @@no_of_customers += 1
                    @cust_id = id
                    @cust_name = name
                    @cust_addr = addr
                end

                def display_details()
                    puts "Customer_id = #@cust_id"
                    puts "Customer name = #@cust_name"
                    puts "Customer address = #@cust_addr"
                end

                def total_no_of_customers()
                    @@no_of_customers += 1
                    puts "Total number of customers = #@@no_of_customers"
                end
            end

    instances - cust1 = Customer.new("1", "aarzoo", "faridabad")
                cust2 = Customer.new("2", "abhishek", "fatehabad")

    execution - cust1.display_details()

    result -    Customer_id = 1
                Customer name = aarzoo
                Customer address = faridabad
                => nil




VARIABLES IN RUBY CLASS - 

        - LOCAL VARIABLE - defined inside a method and are not available outside a method,begins with lower case letter or _
                
        - INSTANCE VARIABLE - these variables are accessible across different methods but only for a particular instance or object,they change from object to object
                syntax - @variable_name

        - CLASS VARIABLE - available across different objects ,it belogs to a class and is a characterstick of it
                syntax - @@variable_name

        - GLOBAL VARIABLE - available acress different classes 
                syntax - $variable_name

    PSEUDO-VARIABLES - special variables that have the appearance of local variable but act as constant(no value can be assigned to them)

        - self - the reciever object for the current method

        - true - vaue representing true 

        - false - value representing false

        - nil - values representing undefined

        - _FILE_ - name of the current source file

        - _LINE_ - the current line number in hte source file 

    CONSTANTS - begins with upercase letter 
              - the ones defined inside a class or module are acessed within it and the ones defined outside the class/module can be accessed globally
              - example => VAR1 = 200
              - to access => #{VAR1}



BACKSLASH NOTATIONS -

    - \n - newline
    - \r - carriage return
    - \b - backspace
    - \e - escape
    - \s - space
    - \x - character x


SHEBANG/HASHBANG - #!/usr/bin/ruby
                 - used to tell the computer which interpretor should be used to execute the file and should be the first line written in any ruby file
                 - in this "#!" is the shebang and the rest is the absolute address for the interpreter


OPERATORS - 

    TYPES OF OPERATORS - 

            ARITHMETIC - 

                        OPERATOR                FUNCTION
                            +                   addition
                            -                   subtraction
                            *                   multiplication
                            /                   division
                            %                   modulus
                            **                  exponent                            

            COMPARISON - 

                        OPERATOR                FUNCTION
                            ==                  a equal to b
                            !=                  a not equal to b
                            >                   a greater than b
                            <                   a smaller than b
                            >=                  a greater than or equal to b
                            <=                  a smaller than or equal to b
                            <=>                 combined comparison equator(returns 0 if a=b, 1 if a>b, -1 if a<b)
                            ===                 used to check equality in when clause( (1...10)===5 tells if 5 lies in the range mentioned)
                           .eql?                true only if the datatype and values both are equal (1==1.0 is true but 1.eql?(1.0) is false)
                           equal?               checks if the object is same as itself or are stored in the same memory location (a.equa?aObj is true but a.equal?bObj is false even if aObj==bObj)


            ASSIGNMENT - 

                        OPERATOR                FUNCTION
                            =                   simple assignment operator
                            +=                  addition and assignment
                            -=                  subtraction and assignment
                            *=                  multiplication and assignment
                            /=                  division and assignment
                            %=                  modulus and assignment
                           **=                  exponent and assignment


            PARALLEL ASSIGNMENT - allows assigning data to multiple variable in single statement

                        OPERATOR                FUNCTION
                        a,b=20,30               a=20,b=30


            BITWISE - 

                        OPERATOR                FUNCTION
                            &                   copies bit to result if exists in both
                            |                   copies bit ot result if exists in either
                            ^                   copies bit if exists in one of the two and not both
                            ~                   flips bits
                            <<                  shifts the bits left no of times mentioned
                            >>                  shifts the bits right no f times mentioned


            LOGICAL - 

                        OPERATOR                FUNCTION
                            and                 if both true,result true
                            or                  if either true, reult true
                            &&                  same as and
                            ||                  same as or
                            !                   reverses the logical state of its operand
                            not                 saame as above


            TERNARY - 

                        OPERATOR                FUNCTION
                            ?:                  if condition true ? then x otherwise y


            RANGE - 

                        OPERATOR                FUNCTION
                           ..                   (1..10)creates a range from 1 to 10
                           ...                  (1...10)creates a range from 1 to 9


            DEFINED? - 

                        OPERATOR                FUNCTION
                        defined?                defined?a is true if a was initialized(a can ve variable/method/method that can be called from super class)


            DOT AND DOUBLE COLON - 

                        OPERATOR                FUNCTION
                            .                   To call a method defined within a module(module_name.method_name)
                            ::                  used to call variable from main object/module/class (object/module/class name :: variable name(if no value specified before :: then by defualt accesses from global/mai obejct))


    OPERATOR PRECEDANCE - 

        order - 
            (1) :: (Constant Resolution Operator)
            (2) [] and []= (Element Reference and Element Set) 
            (3) ** (Exponentiation) 
            (4) !, ~, +, - (Not, Complement, Unary Plus, and Minus) 
            (5) *, /, % (Multiply, Divide, and Modulo) 
            (6) +, - (Addition and Subtraction)
            (7) >> and << (Right and Left Bitwise Shift)
            (8) & (Bitwise 'AND')
            (9) ^ and | (Bitwise Exclusive OR and Regular OR)
            (10) <=, <, >, >= (Comparison Operators)
            (11) <=>, ==, ===, !=, =, ! (Equality and Pattern Match Operators)
            (12) && (Logical 'AND')
            (13) || (Logical 'OR')
            (14) .. and ... (Range)
            (15) ? : (Ternary If-Then-Else)
            (16) **=, %=, { , /=, -=, +=, |=, &=, >>=, <<=, *=, &&=, ||=, = (Assignment)
            (17) defined?
            (18) not
            (19) or , and


COMMENTS - 

    SINGLE LINE - #

    MULTI LINE - =begin
                    line1
                    line2
                 =end


LOOPS - 

    IF..ELSE - used for conditional execution, the values false and nil are false and everything else is true
            - the code is executed if the condition in if is true , id not the code wirtten in else clause is executed
            - this block of code is seperated from other by reserved word/newline/semicolon
            - in ruby, "elsif" is written in place of "else if"
            - syntax - unless (condition)
                            code
                        else
                            code
                        end
            - modifier syntax - code if condition

    UNLESS  - code is executed if the condition mentioned is false, if true else clause is executed
            - syntax - unless (condition)
                            code
                        else
                            code
                        end
            - modifier syntax - code unless condition

    CASE - uses "when" statement with containns ranges or multiple expression when expresseion true the code inside it is executed
        - the expression use === to compare scenarios
        - syntax - case variable_name
                    when exp1,exp2
                        code
                    when exp 3
                        code
                    else
                        code
                    end
        

    WHILE - executes the same condition untill the while condition is true 
          - while loop's condition is seperated by reserved word do/newline/backslash"\"/or a semicolon
          - syntax - while {condition} do
                        code
                     end
          - modifier syntax - code while {condition} 
                                OR
                              begin
                                code
                              end while {condition}


    UNTIL - the same loop is executed while th condition is false and till the until statement is returned true
          - syntax - until condition [do]
                        code
                    end
          - modifier syntax - code until {condition} 
                                OR
                            begin
                                code
                            end until {condition}


    FOR - the same loop is executed while the condition is true for each variable once
        - syntax - for variable in [expression] [do]
                        code
                    end
        - modifier syntax - (expression).each do |variable[, variable...]| code end


    BREAK - terminates the block of code inside which its called(terminates only the most recent method)
        - syntax - break

    NEXT - used to jump on to the next iteration of the most internal loop,terminates execution of a block if called within a block

    REDO - restarts the iteration of the most internal loop,without checking the loop conditionof the block its called inside
        - syntax - redo

    RETRY - used to restart the execution of a block, iterator, or loop from the beginning , particularlly helpful in error handling scenarios or when you want to reattempt an operation under certain conditions.
        - syntax - retry


METHODS - used to bundle one or more repeatable statements into a single unit
        - method's name should begin in lowercase
        - needs to be defined before calling them,otherwise exception may be raised
        - syntax - def method_name(arguments...)
                        expresions
                   end
            #arguments is option and also can be multiple, default is defined by (arg_name=value)

        - RETURN - used to return variables from the method
                 - syntax - return [expression]

        - VARIABLE NUMBER OF PARAMETERS - allows to add variable into the method based on the choics of the user
                 - syntax - def method_name(*var)
        
        - CLASS METHODS - these are the method that belong to a class itself rather than any instance of that class and is mentioned in the definition of the class
                        - can be accessedeasily without intializing any instant of that
                        - syntax - class Accounts
                                        def self.return_date
                                            # class method definition
                                        end
                                   end
                        - access by - Accounts.return_date
        
        - ALIAS - refers to providing an alternative name for method/variable
                - syntax - alias method_new_name method_old_name
                                    OR
                           alias global_variable_new_name global_variable_old_name

        - UNDEF - this cancels a methods definition and cannot appear in method body
                - syntax - undef method_name


BLOCKS - basically a chunk of code that can be assigned a name and can be invoked later
       - typicaaly written inside "{}" or "do----end"
       - syntax - blockname{
                        statement1
                        statement2
                   }

       - YIELD - You can pass parameters to a block using the yield statement followed by the parameters
               - you specify variables to accept these parameters using vertical lines "||"
               - syntax - yield var1,var2
               - invoked - test{|i| puts "#{i}"}

        - BLOCK AND METHOD - can be invoked inside a method either by yield or by th following method
               - syntax - def abc(&name)
                            name.call
                          end
                          abc{puts "hello"}

        - BEGIN BLOCK - code wittrn inside is executed before the execution of any other code
                      - syntax - BEGIN {
                                 }

        - END BLOCK - code written in this block will be executed at last
                    - syntax - END{
                               }


MODULES - it is a way of grouping together methods,classes and constants
        - provides a namespace and prevent name clashes
        - implements the mixin facility
        - named similarly to constants with initial letter capital
        - defined similarly to class methods module_name.method_name
        - syntax - module Moral
                      VERY_BAD = 0
                      BAD = 1
                      def Moral.sin(badness)
                        # ...
                      end
                   end

        - REQUIRE - similar to import statement in Java, used to include any other module in the current one
                  - not required to mention .rb with the file name
                  - syntax - require file_name

        - $LOAD_PATH<<'.' - used to make ruby aware that files to be searched are from the current directory

        - INCLUDE - used to embed a module into a class
                - if the file to be included is from some other file them first it needs to be imported using required statement
                - syntax - include module_name
                
        - MIXINS - in ruby direct multiple inheritance is not possible so concept of mixin is used
                 - Mixins are implemented using modules, which are collections of methods and constants. 
                 - Modules in Ruby serve as containers for methods and can be included in classes to extend their functionality.
                 - When a module is included in a class, all the methods defined within that module become available to instances of that class.


Strings - enclosed inside single inverted commas ''
        - for the special character to behave as character in the string use '\' before it
        - specific character can eb accessed by is position using []
        
        - EXPRESSION SUBSTITUTION - refers to embeding the value of any ruby expression into a strig using "#{x}"
        
        - GENERAL DELIMITED STRINGS - string can be created using the pair ot matching arbitrary delimeter characters like !,(,{,<,ecapsulate
                                    - these are preceeded by percentage character(%)
                                    - here Q is used to create a single-quoted string where characters inside the string are not interpolated
                                    - here x is used for executing shell commands
                                    - here q is same as Q but allows for different delimiters, such as parentheses, square brackets, braces, or any non-alphanumeric, non-whitespace character. 

        - ESCAPE CHARACTERS - 
                    NOTATIONS                   DESCRIPTION
                       \a                       allert
                       \b                       backspace
                       \e                       escape
                       \n                       newline
                       \s                       space
                       \t                       tab
                       \v                       vertical tab
                       \x                       character x

        - CHARACTER ENCODING - allows us to use different character sets of different characters
                             - syntax - $KCODE = 'u'
                    NOTATION                    DESCRIPTION
                        a                       ASCII(default)
                        e                       EUC 
                        n                       NONE (same as ASCII)
                        u                       UTF-8
        
        - BUILT-IN METHODS - applied on instance of the string class
                    METHOD                              DESCRIPTION
                str%arg                             used to do modulus(arg must be array)
                str*arg                             repeats string integer times
                str+other_str                       concatenates strings
                str << obj	                        Concatenates an object to str
                str <=> other_str	                Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than) [The comparison is case-sensitive.]
                str == obj	                        Tests str and obj for equality. If obj is a String, returns true,otherwise false.
                str =~ obj	                        Matches str against a regular expression pattern obj. Returns the position where the match starts; otherwise, false.
                str.b                               returns a copy of self that has ASCII-8BIT encoding
                str.bytes                           returns the ASCII bits for each character
                str.bytesize                        returns the total number of bytes in the string
                str.byteslice(x)                    returns the byte present at the xth position
                str.byteslice(x,n)                  returns n characters from the postion of the xth
                str.bytesplice(x,n,'a')             replaces what the above returned with 'a'
                str.byteindex('character')          returns the position of the character mentioned
                str.byterindex('char',x)            returns the postion where the character occurs for xth time 
                str.capitalize	                    Capitalizes a string.
                str.capitalize!	                    Same as capitalize, but changes are made in place.
                str.casecmp	                        Makes a case-insensitive comparison of strings.
                str.chars                           returns the arrays of individual characters present in the string
                str.center(size,pad string=' ')     Centers a string within the size mention wth of character mentioned in pad string
                str.chomp	                        Removes the record separator ($/)[if exists], usually \n, from the end of a string.
                str.chomp!	                        Same as chomp, but changes are made in place.
                str.chop	                        Removes the last character in str.
                str.chop!	                        Same as chop, but changes are made in place.
                str.clear                           clear the string (removes content)
                str.concat(other_str)	            Concatenates other_str to str.
                str.count(x)	                    returns total number of characters present in the string same as the one in command
                str.crypt(other_str)	            Applies a one-way cryptographic hash to str. The argument is the salt string, which should be two characters long, each character in the range a..z, A..Z, 0..9, . or /.
                str.delete(x)	                    Returns a copy of str with all characters specified deleted
                str.delete!(x)	                    Same as delete, but changes are made in place.
                str.delete_prefix(prefix)           removed the prefix mentioned and displays the remaining content of the string
                str.delete_prefix!(prefix)          does same as above if the prefix exists otherwise returns nil
                str.delete_sufix(sufix)             removed the sufix mentioned and displays the remaining content of the string
                str.delete_sufix!(sufix)            does same as above if the sufix exists otherwise returns nil
                str.downcase	                    Returns a copy of str with all uppercase letters replaced with lowercase.
                str.downcase!	                    Same as downcase, but changes are made in actual string.
                str.dump	                        Returns a version of str with all nonprinting characters replaced by \nnn notation and all special characters escaped.
                str.empty?	                        Returns true if str is empty (has a zero length).
                str.eql?('string')	                checks if str is equal ro the string mentioned int he bracket
                str.each_byte{|byte|print byte,' '} gives ASCII code for each character in the string along with the string
                str.each_char{|c|print c,' '}       Calls the given block with each successive character from self; returns self
                str.encoding                        Returns the Encoding object that represents the encoding of obj.
                str.end_with?('a')                  Returns whether self ends with any of the given 'a'
                str.force_encoding(type)            changes the encoding of the string to type mentioned
                str.freeze                          used to make string immutable
                str.getbyte(index)                  Returns the byte at zero-based index as an ASCII value, or nil if index is out of range
                str.hex                             used to interpret the leading substring of a string as a string of hexadecimal digits (characters 0-9 and A-F, case-insensitive)
                str.include?                        Returns true if self contains other_string, false otherwise
                str.index (substring, offset = 0)   Returns the integer index of the first match for the given argument, or nil if none found;begins at position offset (in characters)
                str.initialize_copy(other_string)   Replaces the contents of self with the contents of other_string
                str.insert (index,other_string)     Inserts the given other_string into self
                str.inspect                         Returns a printable version of self, enclosed in double-quotes, and with special characters escaped.
                str.intern                          Returns the Symbol corresponding to str, creating the symbol if it did not previously exist.
                str.length                          Returns the count of characters (not bytes) in self.
                str.ljust(size,pad_string=' ')      Returns a left-justified copy of self by the size mentioned and with the hellp of pad size mentioned.
                str.lstrip                          Returns a copy of self with whitespace at left removed.
                str.lstrip!                         if modification made returns self otherwise nil
                str.next                            returns successor to self (calculated by incrementing the characters)
                str.next!                           returns the modification in the self itself
                str.oct                             reutrns the octal value and then converting to decimal again
                str.ord                             Returns the integer ordinal of the first character of self.
                str.partition(string_or_regexp)     Returns a 3-element array of substrings of self→ [head, match, tail]
                str.prepend('a','b')                firstly writes the strings mentioned then appends self
                str.reverses                        reverses the String
                str.reverse!                        modification made to self
                str.rjust(size,pad size='')         justifies from right (opposite og ljust)
                str.rpartition(sep)                 partitions[head, match, tail] 
                str.rstrip                          Returns a copy of the receiver with trailing whitespace removed.
                str.rstrip!                         Returs self and same functionality as rstrip.
                str.scan (string or regex)          Matches a pattern against self.
                str.setbyte(index,integer)          Sets the byte at zero-based index to integer; returns integer.
                str.size                            Returns the count of characters (not bytes) in self.
                str.slice (a)                       Returns the substring of self specified by a(can be integer or rangeor start,length or substring)
                str.slice!(*args)                   Removes and returns the substring of self specified by the arguments.
                str.squeeze(*) :                    Adjacent repeatative character is squeezed down to a single character.
                str.squeeze!()                      modification done to self
                str.start_with?(a)                  Returns whether self starts with any of the given string_or_regexp.
                str.strip                           return self with leading and tailing whitespaces removed
                str.strip!                          modifies actual string
                str.sub(pattern | replacement)      Returns a copy of self with only the first occurrence (not all occurrences) of the given pattern replaced.
                str.sub(pattern | replacement)      Returns a copy of self with only the first occurrence (not all occurrences) of the given pattern replaced.
                str.sum(n=16)                       Computes a basic checksum of the characters in the string
                str.swapcase(*options)              reverses cases of characters sof string
                str.swapcase!(*options)             modifies the actual string
                str.to_c                            returns the complex denoting the string form
                str.to_f                            Returns the result of interpreting leading characters in self as a Float
                str.to_i(base=10)                   Returns the result of interpreting leading characters in self as an integer in the given base.
                str.to_r                            Returns the result of interpreting leading characters in str as a rational.
                str.to_s                            Returns self if self is a String, or self converted to a String if self is a subclass of String.
                str.tr(selector,replacement)        changes the specified to the corresponding character in string replacements
                str.tr!(selector,replacement)       modifies the actual string
                str.tr_s(selector,replacement)      modifies like .tr command and also combines squeezing command
                str.tr_s!(selector,replacement)     modifies actual string
                str.undump                          returns an unescaped version of self
                str.upcase(*options)                modifies the case of string to uppercase
                str.upcase!(*options)               modifies in actual string
                str.upto(other_string,exclusive 
                            =false){|string|...}    used to iterate through successive string values, starting from the receiver string up to (and including, by default) the specified other_string
                str.valid_encoding?                 Returns true if self is encoded correctly, false otherwise.
                str.gsub!                           performs modification on the self
                str.gsub(pattern,replacement)
                    [or]
                str.gsub(pattern){|match|block}     Returns a copy of str with all occurrences of pattern replaced with either replacement or the value of the block.
                str.match(pattern)                  used to search a string for a match against a specified regular expression pattern.
                str.hash                            returns a hash based on strings lenth and content
                new                                 used to create instance of string class
                str.try_convert(type)               used to convert the string to specified type if possible


Array - in ruby, arrays are ordered,integer-indexed collections of objects
      - each element in an array is referred to or associated with an index
      - index starts at 0 and the -ve one starts from last element
      - can hold objects such as strings,integer,fixnum,hash,symbol, and even other array objects
      - ruby array grow automatically while adding elements to it
      
      - CREATING ARRAYS - arr=Array.new(size){expression} OR arr=[1,2,3,4]

      - Adding items in array -
            - push - at the end of an array
            - unshift - front of array
            - insert(position,element) - it adds the element and shift elements rather than replacing the element
            - we can add multiple elements at a time too.

      - Remove items from array 
            - pop - from end of an array
            - shift   - From start of an array
            - delete(element)  - Delete from anywhere in an array.

      - BUILT-IN METHODS - applied on instance of the array class
                    METHOD                              DESCRIPTION
                arr.length                              gives the length/size of array
                arr.at(index)                           to access element at a particular position
                arr.fetch(index,"default_value")        if the index is within the range then it will show arr[index],otherwise default value specified
                arr.try_convert(array)                  attempts to convert the specified object into an array
                arr1 & arr2                             concatenatesthe two arraysdisplays the elements presenr in both arrays
                arr1*n                                  displays the whole array n number of times in one single array
                arr1 + arr2                             displays firstly elements of arr1 then elements of arr2
                arr1 - arr2                             displays elements from arr1 than are not in arr2
                arr1 <=> arr2                           returns -1 if arr1<aar2,0 if equal and 1 if arr1>arr2
                arr1 == arr2                            checks if both are equal (results in true/false)
                arr[index]                              if index in range then result in object otherwise nil
                arr[start,length]                       displays elements from index position to the length specified
                arr[range]                              displays elements at range of index sprecified
                arr[index] = object                     assign object to specified index
                arr[start, length] = object             assign object from start till the length
                arr[range] = object                     assign object within the range of index
                arr.all?                                Returns true if all elements of self meet a given criterion(results in true/false)
                arr.any?                                returns true if any element of self meet a given criteria
                arr.append(obj) OR arr.push(obj)        adds obj to the last of the array
                arr.assoc(object)                       method is used to search through an array of arrays and find the first sub-array whose first element matches the specified object
                arr.at(index)                           returns the object at the index specified
                arr.bsearch {|element|...}              Returns an element from self selected by a binary search.
                arr.bsearch_index {|element| ... }      Searches self as described at method bsearch, but returns the index of the found element instead of the element itself.
                arr.clear                               removes all element from array
                arr.collect or map                      Calls the block, if given, with each element of self
                arr,collect! or map!                    Return self with modified values.
                arr.combination(n) {|element| ... }     Calls the block, if given, with combinations of elements of self; returns self.
                arr.compact                             Returns a new Array containing all non-nil elements from self
                arr.compact!                            return self with modifications.
                arr.concat(arr2)                        concatenates arr2 into arr
                arr.count(Integer)                      counts the elements specified
                arr. arr.cycle(n){|x| print x,','}      repeats the whole array likw a cycle for n times
                arr.delete(object)                      deletes the obejct
                arr.delete_at(index)                    deletes the object at the index mentioned
                arr.delete_if{|element|condition..}     deletes elements if it satisfies the condition mentioned
                arr.difference(other_array/s)           return array from the actual array containing only those elements that where not in the other_array
                arr.drop(n)                             deletes first n elements
                arr.dig(index)                          finds the object/nested list present at index
                arr.drop_while{|element|condition..}    deletes the objects that satisfies the condition
                arr.each{|element|condition..}          iterates over each element in the array that satisfies the condition and print each in seperate line
                arr.each_index{|element|condition..}    same as above diff- iterates over index and not object
                arr.empty?                              checks if array is empty,true if yes
                arr.eql?arr2                            checks if both array equal(true if yes)
                arr.fetch(index)                        returns the object at particular index
                arr.fill(obj)                           [OR]
                arr.fill(obj, start)                    [OR]
                arr.fill(obj, start, length)            [OR]
                arr.fill(obj, range)                    [OR]
                arr.fill {|index| ... }                 [OR]
                arr.fill(start) {|index| ... }          [OR]
                arr.fill(start, length) {|index| ... }  [OR]
                arr.fill(range) {|index| ... }          replaces specified elements in self with specified objects
                arr.filter{|element|condition..}        [OR]
                arr.select{|element|condition..}        filters out the objects based on the condition
                arr.filter!{|element|condition..}       [OR]
                arr.select!{|element|condition..}       modification done in actual array
                arr.find_index(element)                 [OR]
                arr.index(element)                      returns the index of the element specified
                arr.first(n)                            returns the first n elements
                arr.flatten(level)                      converts the multi-array array into simple array
                arr.flatten!(level)                     modification done to actual array
                arr.hash                                returns the integer hash value for the array
                arr.include?(object)                    checks if the array includes that element
                arr.initialize_copy(arr2)               [OR]
                arr.replace(arr2)                       replaces the content of arr1 with that of arr2
                arr.insert(index,objects)               inserts the specified objects at the specified index
                arr.inspect                             calls inspect method on every element in the array
                arr.intersection(arr2,..)               returns a new array containing elements from all the arrays mentioned
                arr.intersect?(arr2)                    return true if bothe the arrays have atleast one element in column
                arr.join(seperator=x)                   returns dtring by joining the elements of array seperatd by seperator mention(if mentioned)
                arr.keep_if{|element|condition..}       returns those elements for which the condition returns true value
                arr.last(n)                             displays last n elements of the array
                arr.length [OR] arr.size                returns the number of elements in array
                arr.max(n){|element|condition..}        returns max element(if condition present,max element is based on condition)
                arr.min(n){|element|condition..}        returns min element(if condition mentioned,min is calculated based on condition)
                arr.minmax{|element|condition..}        returns [min,max] elements (condition applied if mentioned)
                arr.none?{|element|condition..}         checks if no element is present in the array(condition applied if mentioned)(searches for obj if mentioned)
                arr.one?(obj) || arr.one?{|x|..}        Returns true if exactly one element of self meets a given criterion.
                arr.permutation(n) {|element| ... }     used to generate all possible permutations of the elements in an array
                arr.pop(n)                              removes elements from array from last(n specifies number of elements to be removed)
                arr.prepent(elements)                   adds elements to the staring of the array
                arr.product(arr2,arr3...)               Computes and returns or yields all combinations of elements from all the Arrays, including both self and other_arrays.
                arr.rassoc(obj)                         Returns the first element in self that is an Array whose second element == obj
                arr.reject{|element|...}                Returns array with elements for which the block returns false or nil
                arr.reject!{|element|...}               modifies the actual array
                arr.repeated_combination(n){|x|..}      Calls the block with each repeated combination of length n of the elements of the array
                arr.reverse                             reverses the order of elements in the array
                arr.reverse!                            modification done to the array itself
                arr.reverse_each{|x|...}                iterates backward over array elements
                arr.rindex(object){|x|...}              return the last index for which obj==element
                arr.rotate(n)                           elements of array are rotated clockwise n number of times
                arr.rotate!(n)                          modification made in actual array
                arr.sample(n)                           returns n number of random elementa from the array
                arr.shift(n)                            removes elements from the front and return the leading elements
                arr.shuffle                             shuffles the elements of the array
                arr.shuffle!                            modification done to actual array
                arr.slice                               alias for []
                arr.slice!(n)||(start,length)||(range)  modifies in actual array
                arr.sort{|a,b|..}                       sorts an array
                arr.sort!                               modification done to actual array
                arr.sort_by!{|x|..}                     used the order mentioned and directly adds it to the actual array
                arr.sum(init=0){|element|...}           It gives the sum of elements from an array.   
                arr.take(n)                             returns a new array containing first n elements of the array
                arr.take_while{|element|...}            same as above just applies the condition on selection of elements
                arr.to_h{|x|..}                         returns a new hash formed on array
                arr.to_s                                returns new string by calling methodof the whole array itself
                arr.transpose                           transposses the rows and columns in an array of arrays(nested arrays must be of same size)
                arr.union(arr2,..)                      returns a union of all the arrays, mentioned(duplicates removed,order preserved using eql?)
                arr.uniq{|x|..}                         returns array by removing duplicate values
                arr.values_at(indexes)                  returns new array containing elements at mentioned indexes
                arr.zip(arr2,..){|x|..}                 returns new array containing nested arrays of mentioned arrays 
                arr | arr2                              returns the union of both arrays removing duplicates and preserving order










----------------------------------------------------RUBY---------------------------------------------------

VERSION - 3.1.2

GENERAL DETAILS - 

    - scripting language designed by Martz(Yukihiro Matsumoto) in 1993 in Japan
    - pure object oriented programming language
    - has features similar to Python,Perl and Smalltalk
    - open-source and general purpose interpreted programming language
    - can be used to write CGI scripts
    - can be embedded into html
    - very scalable, big programs can be easily managed
    - supports GUI tools and can be easily connected to SQL servers
    - contains rich set of built-in functions

IRB - stands for interactive ruby, opens space to write code

WHITESPACES - 
    - generally ignored (except in case of string)
    - used to interpret unambiguous statements (will produce warning if -w is used)
    - a+b(here a is a local varial and will result in (a+b))
    - a +b (here a acts as a method call and the result will be in the form a(+b))

ENDING - 
    - END - ; or nextline character
    - CONTINUE - + or - or \

IDENTIFIERS - are the name of variables,constants and methods
    - case sensitive in ruby(i.e Ram and RAM are different)
    - can consist of alphanumeric character and underscore (_)

RESERVED WORDS - 

    - BEGIN - Defines code to be executed when a Ruby script begins.
    - END - Defines code to be executed when a Ruby script ends.
    - alias - Creates an alias for a method or global variable.
    - and - Logical operator similar to &&.
    - begin - Starts a block of code for exception handling.
    - break - Exits a loop or a block of code.
    - case - Defines a case statement for conditional branching.
    - class - Defines a class in Ruby.
    - def - Defines a method.
    - defined? - Checks if a variable, method, or expression is defined.
    - do - Begins a block of code.
    - else - Part of the conditional branching structure.
    - elsif - Part of the conditional branching structure, similar to else if.
    - end - Marks the end of a block of code.
    - ensure - Defines a block of code to be executed regardless of whether an exception is raised or not.
    - false - Boolean value representing false.
    - for - Begins a loop.
    - if - Begins a conditional statement.
    - in - Used in iterations to specify the range or collection.
    - module - Defines a module in Ruby.
    - next - Skips to the next iteration in a loop.
    - nil - Represents absence of a value.
    - not - Logical negation operator.
    - or - Logical operator similar to ||.
    - redo - Restarts a loop or iteration from the beginning.
    - rescue - Handles exceptions in Ruby.
    - retry - Retries a block of code.
    - return - Exits a method and returns a value.
    - self - Refers to the current object or context.
    - super - Calls a method from a superclass.
    - then - Part of the conditional branching structure.
    - true - Boolean value representing true.
    - undef - Removes a method definition.
    - unless - Part of the conditional branching structure, similar to if not.
    - until - Begins a loop that continues until a condition is true.
    - when - Part of the case statement.
    - while - Begins a loop that continues while a condition is true.
    - yield - Passes control and arguments to a block. 

HERE DOCUMENT - 
    - used to define multiline string in ruby code,often used when embedding of large portion of text is required
    - allows you to easilt specify a block of text without needing to worry about their formatting
    syntax - 
            <<-DELIMETER
                line1
                line2...
            DELIMETER
        #here <<- indicates the start of the here document
        #DELIMETER specifies after which the document begins and where is ends
        #operators/mathematical expresions can be specifies into the main text by using "#" before it,it maked them treat like a code of ruby

    different ways of writing delimeter -
        - DELIMETER and "DELIMETER" - treats the content in it as string
            example - print <<beryl
                        its a good company
                        i like woking here
                      beryl
                OR 
            example - print <<"beryl"
                        its a good company
                        i like working here
                      beryl

            o/p -   its a good company
                    i like woking here
                    => nil


        - `DELIMETER` - treats the content in it as code and is used to execute COMMANDS
            example -   print <<`beryl`
                        echo how are you?
                        echo i'm good
                        beryl

            o/p -   hello
                    how are you
                    => nil


        - <<"DELIMETER" <<"delimeter" - used to stack documents
            example -   print <<-beryl, <<`beryl`
                            i love this company
                        beryl
                            echo hello
                            echo how are you
                        beryl

            o/p -   i love this company
                    hello
                    how are you
                    => nil



CLASSES AND OBJECTS - 
    - CLASS is a blueprint from which individual OBJECTS are created

    DEFINING CLASS
        syntax - class class_name
                end
        example - 
                    class Customer
                        @@no_of_customers = 0

                        def initialize(id, name, addr)
                            @cust_id = id
                            @cust_name = name
                            @cust_addr = addr
                        end
                    end

    FEATURES OF OOPS LANGUAGE - 
        
        DATA ENCAPSULATION - refers to the bundeling of data and the methods that operate on data into the single unit(object)
                           - done by classes(ecapsulate bothe data and behaviour)
                           - helps hide unnecessary details and display only the required ones

        DATA ABSTRACTION - refers to hiding unnecessary details and showing only required ones
                         - done basically by encapsulation , by defining public methods that act as ine\terface to manipulate internal state of object
                         - allows user to interact with the objects in simplified manner without needing the understanding of the implimentation details 

        POLYMORPHISM - allows objects of different classes to be treaated as object of same uper class
                     - achieved through method overriding(allowing subclasses to their own implementationof method difined in the super class) and overloading(allows method with same name but different parameters to coexist within a class or its subclasses)
                     - this flexibility enables objects to exibit different behaviour based on their specific types 

        INHERITANCE - allows subclasses to inherit attributes from superclass/parent class
                    - implemented using "<" and then the name or the superclass in the class definition
                    - this helps inherit all the instance variable, methods, and behaviour allowing them to reuse code and extend functionality
                    - creates a hierarical relationship between classes, where specialized inherit from general ones

    CREATING OBJECTS - 
        syntax - object_name = class_name.new(parameters)

    MEMBER FUNCTION - also known as mothods or functions, always assigned inside a class and starts with "def" and the name is always sprecified in lowercase letters and ends with "end"
        syntax - class class_name
                    def function_name
                        statement1
                        statement2
                    end
                 end



CASE STUDY - 

    Code - 
            class Customer
                @@no_of_customers = 0

                def initialize(id, name, addr)
                    @@no_of_customers += 1
                    @cust_id = id
                    @cust_name = name
                    @cust_addr = addr
                end

                def display_details()
                    puts "Customer_id = #@cust_id"
                    puts "Customer name = #@cust_name"
                    puts "Customer address = #@cust_addr"
                end

                def total_no_of_customers()
                    @@no_of_customers += 1
                    puts "Total number of customers = #@@no_of_customers"
                end
            end

    instances - cust1 = Customer.new("1", "aarzoo", "faridabad")
                cust2 = Customer.new("2", "abhishek", "fatehabad")

    execution - cust1.display_details()

    result -    Customer_id = 1
                Customer name = aarzoo
                Customer address = faridabad
                => nil




VARIABLES IN RUBY CLASS - 

        - LOCAL VARIABLE - defined inside a method and are not available outside a method,begins with lower case letter or _
                
        - INSTANCE VARIABLE - these variables are accessible across different methods but only for a particular instance or object,they change from object to object
                syntax - @variable_name

        - CLASS VARIABLE - available across different objects ,it belogs to a class and is a characterstick of it
                syntax - @@variable_name

        - GLOBAL VARIABLE - available acress different classes 
                syntax - $variable_name

    PSEUDO-VARIABLES - special variables that have the appearance of local variable but act as constant(no value can be assigned to them)

        - self - the reciever object for the current method

        - true - vaue representing true 

        - false - value representing false

        - nil - values representing undefined

        - _FILE_ - name of the current source file

        - _LINE_ - the current line number in hte source file 

    CONSTANTS - begins with upercase letter 
              - the ones defined inside a class or module are acessed within it and the ones defined outside the class/module can be accessed globally
              - example => VAR1 = 200
              - to access => #{VAR1}



BACKSLASH NOTATIONS -

    - \n - newline
    - \r - carriage return
    - \b - backspace
    - \e - escape
    - \s - space
    - \x - character x


SHEBANG/HASHBANG - #!/usr/bin/ruby
                 - used to tell the computer which interpretor should be used to execute the file and should be the first line written in any ruby file
                 - in this "#!" is the shebang and the rest is the absolute address for the interpreter


OPERATORS - 

    TYPES OF OPERATORS - 

            ARITHMETIC - 

                        OPERATOR                FUNCTION
                            +                   addition
                            -                   subtraction
                            *                   multiplication
                            /                   division
                            %                   modulus
                            **                  exponent                            

            COMPARISON - 

                        OPERATOR                FUNCTION
                            ==                  a equal to b
                            !=                  a not equal to b
                            >                   a greater than b
                            <                   a smaller than b
                            >=                  a greater than or equal to b
                            <=                  a smaller than or equal to b
                            <=>                 combined comparison equator(returns 0 if a=b, 1 if a>b, -1 if a<b)
                            ===                 used to check equality in when clause( (1...10)===5 tells if 5 lies in the range mentioned)
                           .eql?                true only if the datatype and values both are equal (1==1.0 is true but 1.eql?(1.0) is false)
                           equal?               checks if the object is same as itself or are stored in the same memory location (a.equa?aObj is true but a.equal?bObj is false even if aObj==bObj)


            ASSIGNMENT - 

                        OPERATOR                FUNCTION
                            =                   simple assignment operator
                            +=                  addition and assignment
                            -=                  subtraction and assignment
                            *=                  multiplication and assignment
                            /=                  division and assignment
                            %=                  modulus and assignment
                           **=                  exponent and assignment


            PARALLEL ASSIGNMENT - allows assigning data to multiple variable in single statement

                        OPERATOR                FUNCTION
                        a,b=20,30               a=20,b=30


            BITWISE - 

                        OPERATOR                FUNCTION
                            &                   copies bit to result if exists in both
                            |                   copies bit ot result if exists in either
                            ^                   copies bit if exists in one of the two and not both
                            ~                   flips bits
                            <<                  shifts the bits left no of times mentioned
                            >>                  shifts the bits right no f times mentioned


            LOGICAL - 

                        OPERATOR                FUNCTION
                            and                 if both true,result true
                            or                  if either true, reult true
                            &&                  same as and
                            ||                  same as or
                            !                   reverses the logical state of its operand
                            not                 saame as above


            TERNARY - 

                        OPERATOR                FUNCTION
                            ?:                  if condition true ? then x otherwise y


            RANGE - 

                        OPERATOR                FUNCTION
                           ..                   (1..10)creates a range from 1 to 10
                           ...                  (1...10)creates a range from 1 to 9


            DEFINED? - 

                        OPERATOR                FUNCTION
                        defined?                defined?a is true if a was initialized(a can ve variable/method/method that can be called from super class)


            DOT AND DOUBLE COLON - 

                        OPERATOR                FUNCTION
                            .                   To call a method defined within a module(module_name.method_name)
                            ::                  used to call variable from main object/module/class (object/module/class name :: variable name(if no value specified before :: then by defualt accesses from global/mai obejct))


    OPERATOR PRECEDANCE - 

        order - 
            (1) :: (Constant Resolution Operator)
            (2) [] and []= (Element Reference and Element Set) 
            (3) ** (Exponentiation) 
            (4) !, ~, +, - (Not, Complement, Unary Plus, and Minus) 
            (5) *, /, % (Multiply, Divide, and Modulo) 
            (6) +, - (Addition and Subtraction)
            (7) >> and << (Right and Left Bitwise Shift)
            (8) & (Bitwise 'AND')
            (9) ^ and | (Bitwise Exclusive OR and Regular OR)
            (10) <=, <, >, >= (Comparison Operators)
            (11) <=>, ==, ===, !=, =, ! (Equality and Pattern Match Operators)
            (12) && (Logical 'AND')
            (13) || (Logical 'OR')
            (14) .. and ... (Range)
            (15) ? : (Ternary If-Then-Else)
            (16) **=, %=, { , /=, -=, +=, |=, &=, >>=, <<=, *=, &&=, ||=, = (Assignment)
            (17) defined?
            (18) not
            (19) or , and


COMMENTS - 

    SINGLE LINE - #

    MULTI LINE - =begin
                    line1
                    line2
                 =end


LOOPS - 

    IF..ELSE - used for conditional execution, the values false and nil are false and everything else is true
            - the code is executed if the condition in if is true , id not the code wirtten in else clause is executed
            - this block of code is seperated from other by reserved word/newline/semicolon
            - in ruby, "elsif" is written in place of "else if"
            - syntax - unless (condition)
                            code
                        else
                            code
                        end
            - modifier syntax - code if condition

    UNLESS  - code is executed if the condition mentioned is false, if true else clause is executed
            - syntax - unless (condition)
                            code
                        else
                            code
                        end
            - modifier syntax - code unless condition

    CASE - uses "when" statement with containns ranges or multiple expression when expresseion true the code inside it is executed
        - the expression use === to compare scenarios
        - syntax - case variable_name
                    when exp1,exp2
                        code
                    when exp 3
                        code
                    else
                        code
                    end
        

    WHILE - executes the same condition untill the while condition is true 
          - while loop's condition is seperated by reserved word do/newline/backslash"\"/or a semicolon
          - syntax - while {condition} do
                        code
                     end
          - modifier syntax - code while {condition} 
                                OR
                              begin
                                code
                              end while {condition}


    UNTIL - the same loop is executed while th condition is false and till the until statement is returned true
          - syntax - until condition [do]
                        code
                    end
          - modifier syntax - code until {condition} 
                                OR
                            begin
                                code
                            end until {condition}


    FOR - the same loop is executed while the condition is true for each variable once
        - syntax - for variable in [expression] [do]
                        code
                    end
        - modifier syntax - (expression).each do |variable[, variable...]| code end


    BREAK - terminates the block of code inside which its called(terminates only the most recent method)
        - syntax - break

    NEXT - used to jump on to the next iteration of the most internal loop,terminates execution of a block if called within a block

    REDO - restarts the iteration of the most internal loop,without checking the loop conditionof the block its called inside
        - syntax - redo

    RETRY - used to restart the execution of a block, iterator, or loop from the beginning , particularlly helpful in error handling scenarios or when you want to reattempt an operation under certain conditions.
        - syntax - retry


METHODS - used to bundle one or more repeatable statements into a single unit
        - method's name should begin in lowercase
        - needs to be defined before calling them,otherwise exception may be raised
        - syntax - def method_name(arguments...)
                        expresions
                   end
            #arguments is option and also can be multiple, default is defined by (arg_name=value)

        - RETURN - used to return variables from the method
                 - syntax - return [expression]

        - VARIABLE NUMBER OF PARAMETERS - allows to add variable into the method based on the choics of the user
                 - syntax - def method_name(*var)
        
        - CLASS METHODS - these are the method that belong to a class itself rather than any instance of that class and is mentioned in the definition of the class
                        - can be accessedeasily without intializing any instant of that
                        - syntax - class Accounts
                                        def self.return_date
                                            # class method definition
                                        end
                                   end
                        - access by - Accounts.return_date
        
        - ALIAS - refers to providing an alternative name for method/variable
                - syntax - alias method_new_name method_old_name
                                    OR
                           alias global_variable_new_name global_variable_old_name

        - UNDEF - this cancels a methods definition and cannot appear in method body
                - syntax - undef method_name










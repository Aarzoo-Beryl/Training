---------------------------------------------------------------------POSTGRES-----------------------------------------------------------------------------



DEFINITON

	- It is an open source object relational database system.It allows yout to store,process and retrieve data successfully.It was developed by world 	  wide team of volunteers.


KEY FEATURES 

	- free to download 
	- supports various os
	- highly secure and reliable
	- compatible with several data types
	- supports MVCC
	- supports text,image,sounds and videos


MVCC 

	- Stands for Multiverse Concurrency Control
	- keeps our data safe and organaized, allowing multiple people to use same database without creating chaos
	- features snapshot(when a transaction begins it takes snapshot of the database of how it looked at that particular moment,this snapshot remains 	  consistant throughout the transaction, even if people are making changes to some data) and isolation(it states that each transaction gets its own 	  snapshot ensuring that writing of one doesn't effect the reading of other,i.e. reading doesn't block writing and writing doesn't block reading)


INSTALLATION COMMANDS

	- $sudo apt-get install postgresql postgresql-contrib


PSQL COMMANDS 

	- $psql - opens psql mode
	- $sudo su postgres - used to switch between different users
	- $sudo -i -u postgres - will change user to postgres through it we can enter psql mode  
	- \l - used to list the databases present in the system
		op -                     List of databases
			Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
			-----------+----------+----------+---------+-------+-----------------------
			new       | postgres | UTF8     | en_IN   | en_IN | 
			postgres  | postgres | UTF8     | en_IN   | en_IN | 
			sql_demo  | postgres | UTF8     | en_IN   | en_IN | 
			template0 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
			   |          |          |         |       | postgres=CTc/postgres
			template1 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
			   |          |          |         |       | postgres=CTc/postgres
			(5 rows)

	- \du - lists all the users present in the system
		o/p -                             List of roles
			 Role name |                         Attributes                         | Member of 
			-----------+------------------------------------------------------------+-----------
			 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
			 user1     | Superuser                                                  | {}
			
	- \q - to quit psql mode
	- \c - to got inside a database
		o/p - You are now connected to database "sql_demo" as user "postgres".
	- select version() - displays the version of the postgresql
		o/p -                                  version                                                                
		--------------------------------------------------------------------------------------------------------------------------------------
		 PostgreSQL 10.23 (Ubuntu 10.23-0ubuntu0.18.04.2) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0, 64-bit
		(1 row)


	- help - to seek help
	- \d table_name - describe the contents/columns of the table specified
		syntax - #\d movies
		o/p -                          Table "public.movies"
			    Column    |         Type          | Collation | Nullable | Default 
			--------------+-----------------------+-----------+----------+---------
			 movie_id     | integer               |           |          | 
			 movie_name   | character varying(40) |           |          | 
			 movie_genre  | character varying(30) |           |          | 
			 imdb_ratings | real                  |           |          | 


SQL COMMANDS

	- CREATE DATABASE - used to create a new database
			syntax - #CREATE DATABASE sql_demo
			o/p - CREATE DATABASE (tells that the database has been successfully created )
        - DROP DATABASE - used to delete a databse along with its structure(you can't delete the database you currently are on)
			synatx - DROP DATABSE [IF EXISTS] database_name
			example - DROP DATABSE [IF EXISTS] new
			o/p - DROP DATABASE
        - CREATE TABLE - used to create a new table in the database
			synatx - CREATE TABLE table_name(
				   column1 datatype,
				   column2 datatype,
				   column3 datatype,
				   .....
				   columnN datatype,
				   PRIMARY KEY( one or more columns )
				); 
			example - CREATE TABLE persons (
				  id SERIAL,
				  first_name VARCHAR(50),
				  last_name VARCHAR(50),
				  dob DATE,
				  email VARCHAR(255),
				  PRIMARY KEY (id)
				);

			o/p - CREATE TABLE 
        - DROP TABLE -  used to delete the table along with its structure
			syntax - DROP TABLE table_name
			example - DROP TABLE person
			o/p - DROP TABLE
        - INSERT QUERY - used to insert data into the table
			syntax - INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)
				VALUES (value1, value2, value3,...valueN);
			example -       INSERT INTO Employee (Emp_id, Emp_name, Emp_mail, Emp_gender, Emp_department, Emp_address, Emp_salary)
					VALUES
					    (101, 'John Doe', 'john.doe@example.com', 'Male', 'IT', '123 Main St, City', 75000.00),
					    (102, 'Jane Smith', 'jane.smith@example.com', 'Female', 'HR', '456 Elm Ave, Town', 60000.00),
					    (103, 'Michael Johnson', 'michael.johnson@example.com', 'Male', 'Finance', '789 Oak Rd, Village', 80000.00),
					    (104, 'Emily Brown', 'emily.brown@example.com', 'Female', 'Marketing', '987 Maple Ln, Suburb', 65000.00),
					    (105, 'David Lee', 'david.lee@example.com', 'Male', 'Sales', '654 Pine Blvd, County', 70000.00),
					    (106, 'Alex Turner', 'alex.turner@example.com', 'Male', 'Sales', '789 Elm St, City', 72000.00),
					    (107, 'Sophia White', 'sophia.white@example.com', 'Female', 'IT', '234 Oak Ave, Town', 68000.00),
					    (108, 'Daniel Harris', 'daniel.harris@example.com', 'Male', 'Finance', '567 Maple Rd, Village', 85000.00),
					    (109, 'Olivia Martin', 'olivia.martin@example.com', 'Female', 'HR', '876 Pine Ln, Suburb', 62000.00),
					    (110, 'William Clark', 'william.clark@example.com', 'Male', 'Marketing', '345 Cedar Blvd, County', 71000.00),
					    (155, 'Emma Rodriguez', 'emma.rodriguez@example.com', 'Female', 'IT', '123 Elm St, City', 70000.00),
					    (156, 'Liam Walker', 'liam.walker@example.com', 'Male', 'Sales', '456 Oak Ave, Town', 63000.00),
					    (157, 'Ava Scott', 'ava.scott@example.com', 'Female', 'Finance', '789 Maple Rd, Village', 78000.00),
					    (158, 'Noah Hall', 'noah.hall@example.com', 'Male', 'HR', '987 Pine Ln, Suburb', 67000.00),
					    (159, 'Isabella Young', 'isabella.young@example.com', 'Female', 'Marketing', '654 Cedar Blvd, County', 							74000.00);

        - SELECT QUERY - used to display specific data froma table
			syntax - SELECT * FROM table_name
			example - SELECT * FROM movies
			o/p -    movie_id |        movie_name        |  movie_genre   | imdb_ratings 
				----------+--------------------------+----------------+--------------
				      101 | Vertigo                  | Mystry,Romance |          8.3
				      102 | The Shawshank Redemption | Crime,Friction |          9.3
				      104 | The Dark Knight          | Action         |            9
				      105 | The Matrix               | Sci-fic        |          8.7
				      106 | Se7en                    | Crime          |          8.6
				      107 | Interstellar             | Adventure      |          8.6
				      103 | 12 Angry Men             | Drama,Crime    |            9
				(7 rows)

        - WHERE CLAUSE - used to specify conditions while running a command
			syntax - SELECT * FROM table_name
				 WHERE (condition)
			example - SELECT * FROM movies
				  WHERE imdb_ratings > 8.7
			o/p -    movie_id |        movie_name        |  movie_genre   | imdb_ratings 
				----------+--------------------------+----------------+--------------
				      102 | The Shawshank Redemption | Crime,Friction |          9.3
				      104 | The Dark Knight          | Action         |            9
				      103 | 12 Angry Men             | Drama,Crime    |            9
				(3 rows)
 
        - AND CLAUSE - used t conbine to two condition where both conditions needs to be fullfilled
			syntax - SELECT * FROM movies
                                 WHERE condition1 AND condition2
			example - SELECT * FROM movies
                                  WHERE imdb_ratings > 8.7 and movie_genre='Action'
			o/p -    movie_id |   movie_name    | movie_genre | imdb_ratings 
				----------+-----------------+-------------+--------------
				      104 | The Dark Knight | Action      |            9
				(1 row)

        - OR CLAUSE - used to specify multiple condition where it displays result even if 1 cndition of them is true
                       syntax - SELECT * FROM movies
                                 WHERE condition1 OR condition2
                       example - SELECT * FROM movies
                                 WHERE imdb_ratings > 8.7 OR movie_genre='Action'
                       o/p -     movie_id |        movie_name        |  movie_genre   | imdb_ratings 
				----------+--------------------------+----------------+--------------
				      102 | The Shawshank Redemption | Crime,Friction |          9.3
				      104 | The Dark Knight          | Action         |            9
				      103 | 12 Angry Men             | Drama,Crime    |            9
				(3 rows)


        - UPDATE QUERY - 
			 syntax - UPDATE table_name
				  SET column1 = value1, column2 = value2...., columnN = valueN
				  WHERE [condition];
                         example - UPDATE movies
				   SET imdb_ratings = 8.7
				   WHERE imdb_ratings = 8.6;
                         o/p - UPDATE TABLE
        - DELETE QUERY - used to delete a table or particular enteries of the table
			syntax - DELETE FROM table_name
				 WHERE [condition];
			example - DELETE FROM movies
				  WHERE imdb_ratings=8.6;
			o/p - DELETE 2
        - LIKE CLAUSE - used to  provide an approx idea of what a user is trying to search and results in all the matching patterns
			synatx - SELECT * FROM table_name
				 WHERE column LIKE 'pattern'
			example - SELECT * FROM movies
				  WHERE movie_name LIKE 'THE%';
			o/p -    movie_id |        movie_name        |  movie_genre   | imdb_ratings 
				----------+--------------------------+----------------+--------------
				      102 | The Shawshank Redemption | Crime,Friction |          9.3
				      104 | The Dark Knight          | Action         |            9
				      105 | The Matrix               | Sci-fic        |          8.7
				(3 rows)

        - SCHEMA - used to describe the structure of the table to be made
			syntax - create schema myschema;
				 o/p - CREATE SCHEMA
			syntax - create table myschema.company(
				   ID   INT              NOT NULL,
				   NAME VARCHAR (20)     NOT NULL,
				   AGE  INT              NOT NULL,
				   ADDRESS  CHAR (25),
				   SALARY   DECIMAL (18, 2),
				   PRIMARY KEY (ID)
				);
			o/p - CREATE TABLE

        - LIMIT CLAUSE - used to limit the number of enteries to be displayed by the system
			syntax - SELECT * 
				 FROM table_name 
				 LIMIT {no.of rows}
			example - SELECT * 
				  FROM store
				  LIMIT 5
			o/p -    store_id |    store_name    | product | quantity | cost 
				----------+------------------+---------+----------+------
				        1 | NIT              | Iphone  |      100 | 1050
				        1 | NIT              | Macbook |       75 |  825
				        1 | NIT              | Iwatch  |       50 | 1500
				        2 | Select City Walk | Iphone  |      120 | 1275
				        2 | Select City Walk | Macbook |       90 | 1000
				(5 rows)

        - OFFSET CLAUSE - used to tell after which row number the data is to be displayed
			syntax - SELECT *
				 FROM store
				 LIMIT {no.of rows} OFFSET {row number}
			example - SELECT *
				  FROM store
				  LIMIT 5 OFFSET 2
			O/P -    store_id |    store_name    | product | quantity | cost 
				----------+------------------+---------+----------+------
				        1 | NIT              | Iwatch  |       50 | 1500
				        2 | Select City Walk | Iphone  |      120 | 1275
				        2 | Select City Walk | Macbook |       90 | 1000
				        2 | Select City Walk | Iwatch  |       60 | 1800
				        3 | Ambience         | Iphone  |       80 | 1100
				(5 rows)

        - ORDER BY - used to order the table aescending/descending based on a certain column of the table
                        synatx - SELECT * FROM table_name ORDER BY colmn_name [ASC|DESC];
                        example -  SELECT * FROM store ORDER BY store_name ASC;
                        o/p -    store_id |    store_name    | product | quantity | cost 
				----------+------------------+---------+----------+------
					5 | Ambala           | Iphone  |       95 |  975
					5 | Ambala           | Macbook |       70 | 1150
					5 | Ambala           | Iwatch  |       45 | 1725
					3 | Ambience         | Iphone  |       80 | 1100
					3 | Ambience         | Macbook |       60 |  950
					3 | Ambience         | Iwatch  |       40 | 1650
					6 | Chandigarh       | Iphone  |      130 | 1400
					6 | Chandigarh       | Iwatch  |       70 | 1250
					6 | Chandigarh       | Macbook |      100 |  800
					7 | Delhi            | Macbook |       55 | 1200
					7 | Delhi            | Iphone  |       75 | 1025
					4 | Faridabad        | Macbook |       85 |  775
					4 | Faridabad        | Iphone  |      110 | 1325
					4 | Faridabad        | Iwatch  |       55 | 1475
					1 | NIT              | Iphone  |      100 | 1050
					1 | NIT              | Iwatch  |       50 | 1500
					1 | NIT              | Macbook |       75 |  825
					2 | Select City Walk | Iwatch  |       60 | 1800
					2 | Select City Walk | Macbook |       90 | 1000
					2 | Select City Walk | Iphone  |      120 | 1275
				(20 rows)

        - GROUP BY - used to group data having identical contents
					syntax - SELECT * FROM table_name GROUP BY column_name;
					example -   SELECT store_id, store_name, SUM(quantity) AS total_quantity, SUM(cost) AS total_cost
								FROM store GROUP BY store_id, store_name;
					o/p -    store_id |    store_name    | total_quantity | total_cost 
						----------+------------------+----------------+------------
							4 | Faridabad        |            250 |       3575
							7 | Delhi            |            130 |       2225
							6 | Chandigarh       |            300 |       3450
							2 | Select City Walk |            270 |       4075
							1 | NIT              |            225 |       3375
							5 | Ambala           |            210 |       3850
							3 | Ambience         |            180 |       3700
							(7 rows)

        - WITH CLAUSE - used to write subquery and main query in more appropriate/readable manner
					syntax - WITH ___ AS ____ (SELECT -----)
							 SELECT * FROM -----,----
					example -   with average_rating as (select AVG(imdb_ratings) as avg from movies)
								select * from movies as e, average_rating as av
								where e.imdb_ratings > av.avg; 
					o/p -  movie_id |        movie_name        |  movie_genre   | imdb_ratings |       avg        
						  ----------+--------------------------+----------------+--------------+------------------
								102 | The Shawshank Redemption | Crime,Friction |          9.3 | 8.78571442195347
								104 | The Dark Knight          | Action         |            9 | 8.78571442195347
								103 | 12 Angry Men             | Drama,Crime    |            9 | 8.78571442195347
							(3 rows)
		- HAVING CLAUSE - it allows us to pick out particular rows where the function's result meets some condition.Always placed after group by clause.
						  The WHERE clause places conditions on the selected columns, whereas the HAVING clause places conditions on groups created by the GROUP BY clause.
					syntax -    SELECT column1, column2
								FROM table1, table2
								WHERE [ conditions ]
								GROUP BY column1, column2
								HAVING [ conditions ]
								ORDER BY column1, column2
					example -   SELECT name FROM employees
								GROUP BY name
								HAVING COUNT(name)>1;
					o/p -    name  
							-------
							James
							Paul
							(2 rows)
		-DISTINCT KEYWORD - is it used with select statement in order to remove duplicate data and fetching only unique data 
					syntax -    SELECT DISTINCT col_name FROM table_name;
					example -   SELECT DISTINCT name FROM employees;
					o/p -    name  
							-------
							Mark
							Teddy
							Allen
							James
							David
							Paul
							Kim
							(7 rows)

OPERATORS

	- Arithmatic Operators - used to do arithmatic operations
			
			Operator		Function
			  +			Addition
			  -			Subtraction
			  *			Multiplication
			  /			Division
			  %			Modulus
			  ^			Exponentiation
			  |/			Squate root
			  ||/			Cube root
			  !			Factorial
			  !!			Factorial(Prefix operator)

	- Comparison Operators - used to do comaprison between similar terms

			Operator		Function
			  =			checks if a is equal to b
			  !=			checks if a is not equal to b
			  <>			checks is value of a and b are equal or not(if not equal cndition is true)
			  >			checks if left operand is greater than right operand
			  <			checks if right operand is greater than left operand
			  >=			checks if value of left operand is greater than or equal to the value of right operand
			  <=			checks if value of right operand is greater than or equal to the value of left operand

	- Logical Operators - used to define different logics between multiple conditions

			Operator		Function
			  AND			specifies that bothe the conditions mentioned should be true then only the result will be true
			  NOT			it is used to reverse the meaning of the logical operator and is used as prefix
			  OR			specifies than the result will be true even if a single cinditon from the mentioned ones is true

	- Bit Operators - these works on bits and performs bit-by-bit operations

			Operator		Function
			  &			works as AND operator and copies a bit to the redult only if it exists in both operands
			  |			works as OR and copies a bit if it exists in either operand
			  ~			works as ones complement and has effect of flippinf bits
			  <<			works as left shift operator and moves left operands value to the left by the number of digits specified
			  >>			works as right shift operator and moves the the bits to right by the numbers of digits specified
			 \#			works as bitwise XOR and if bits same on both operand then resultant bit 0 otherwise 1


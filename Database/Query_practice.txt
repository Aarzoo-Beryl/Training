-------------------database is of online retail system -------------------------------------


tables - 
        - category - 
                    category_id integer [primary key, not null]
                    title varchar [not null]
                    description text [not null]          

        - seller - 
                    seller_id integer [primary key , not null]
                    name varchar [not null]
                    phone_number integer [not null]
                    email varchar [not null]

        - brand  -
                    brand_id integer [primary key, not null]
                    title varchar [not null]
                    description text [not null]

        - product -
                    product_id integer [primary key , not null]
                    name varchar [not null]
                    price real [not null]
                    description text [not null]
                    brand_id integer [not null , ref: >brand.brand_id]
                    seller_id integer [not null , ref: >seller.seller_id]
                    category_id integer [not null, ref: > category.category_id]

        - address - 
                    address_id integer [primary key, not null]
                    house_number varchar [not null]
                    sector varchar [not null]
                    city varchar [not null]
                    state varchar [not null]
                    country varchar [not null]
                    pincode integer [not null]

        - customer - 
                    customer_id integer [primary key , not null]
                    name varchar [not null]
                    phone_number integer [not null]
                    email varchar [not null]
                    address_id varchar [not null , ref: > address.address_id]

        - order_summary -
                    bill_id integer [not null , ref: >bill.bill_id]
                    product_id integer [not null , ref: >product.product_id]

        - payment- 
                    payment_id integer [primary key, not null]
                    type_id integer [not null , ref: >payment_type.type_id]
                    bill_id integer [not null , ref: > bill.bill_id]
                    date text [not null]
                    status text [not null]
                    customer_id integer [not null, ref: >customer.customer_id]

        - payment_type - 
                    type_id integer [primary key, not null]
                    title varchar [not null]
                    description text [not null]

        - review -
                    review_id integer [primary key, not null]
                    description text [not null]
                    product_id integer [not null , ref: > product.product_id]
                    customer_id integer [not null , ref: > customer.customer_id]

        - bill-   
                    bill_id integer [primary key, not null]
                    customer_id integer [not null , ref: > customer.customer_id]
                    date varchar [not null]
                    shipping_address varchar [not null]
                    total_bill integer [not null]

-----------------------------------------------BASIC CONCEPT PRACTICE-------------------------------------------------------------



1. find names and phone number for each customer

    query - select name,phone_number from customer;
    result -         name      | phone_number 
               ----------------+--------------
                Kate Anderson  |   1111111111
                Alice Johnson  |   1234567890
                Carol Williams |   5555555555
                Jack White     |   2222222222
                Grace Miller   |   7777777777
                Penny Garcia   |   5554443333
                (6 rows)


2. find total number of products in each category

    query - select c.category_id , c.title ,count(pro.product_id) from category c
            join product as pro on c.category_id = pro.product_id
            group by c.category_id , c.title
            order by category_id asc;
    result -  category_id |        title        | count 
             -------------+---------------------+-------
                        1 | Electronics         |     1
                        2 | Mobile Phones       |     1
                        3 | Audio               |     1
                        4 | Furniture           |     1
                        5 | Home Appliances     |     1
                        6 | Cameras             |     1
                        7 | Computers           |     1
                        8 | Printers & Scanners |     1
                        9 | Tablets             |     1
                       10 | Wearables           |     1
                       11 | Gaming              |     1
                       12 | Networking          |     1
                       13 | Monitors            |     1
                       14 | Storage             |     1
                       15 | Accessories         |     1
                (15 rows)


3. list top 5 most expensive products

    query - select * from product
            order by price desc
            limit 5;
    result -   product_id |    name    | price |                     description                     | brand_id | seller_id | category_id | review_id 
              ------------+------------+-------+-----------------------------------------------------+----------+-----------+-------------+-----------
                        6 | TV         |  1500 | 55-inch smart TV with 4K resolution                 |        6 |         2 |           6 |         2
                        1 | Laptop     |  1200 | 15-inch laptop with Intel Core i7 processor         |        1 |         2 |           4 |         1
                        7 | Camera     |  1000 | Mirrorless camera with interchangeable lenses       |        5 |         6 |           4 |         1
                        2 | Smartphone |   800 | Latest model with 6.5-inch display and dual cameras |        4 |         4 |           2 |         5
                        9 | Tablet     |   500 | 10-inch tablet with quad-core processor             |        9 |         9 |           9 |         7
                (5 rows)



4. calculate the total revenue from all orders

    query - select sum(total_bill) as total_revenue from bill;
    result -  total_revenue 
             ---------------
                        3120
                (1 row)



5. find average price of products sold by each seller

    query - select c.category_id,c.title,count(pro.product_id) as no_of_products, avg(pro.price) as avg_pro_price 
            from category c
            join product pro on c.category_id = pro.category_id
            group by c.category_id , c.title
            order by c.category_id asc;
    result -  category_id |        title        | no_of_products | avg_pro_price 
             -------------+---------------------+----------------+---------------
                        2 | Mobile Phones       |              2 |           475
                        4 | Furniture           |              3 |           800
                        5 | Home Appliances     |              1 |           100
                        6 | Cameras             |              1 |          1500
                        8 | Printers & Scanners |              1 |           300
                        9 | Tablets             |              1 |           500
                       10 | Wearables           |              1 |           400
                       11 | Gaming              |              1 |           250
                       12 | Networking          |              1 |           400
                       13 | Monitors            |              1 |            80
                       14 | Storage             |              1 |           300
                       15 | Accessories         |              1 |           120
                (12 rows)



6. identifying customers who have places more than 2 orders

    query - select c.name , count(p.payment_id) as number_of_transaction 
            from customer c join payment p on c.customer_id = p.customer_id
            group by c.name;
    result -         name      | number_of_transaction 
               ----------------+-----------------------
                Carol Williams |                     1
                Alice Johnson  |                     3
                Grace Miller   |                     1
                Kate Anderson  |                     1
                (4 rows)


7. list products with price higher than average price

    query - with avg_price as (select avg(price) as avg from product)
            select product_id, name, price ,avg 
            from product p,avg_price a
            where p.price > a.avg
            order by product_id asc;
    result -   product_id |    name    | price |       avg        
              ------------+------------+-------+------------------
                        1 | Laptop     |  1200 | 486.666666666667
                        2 | Smartphone |   800 | 486.666666666667
                        6 | TV         |  1500 | 486.666666666667
                        7 | Camera     |  1000 | 486.666666666667
                        9 | Tablet     |   500 | 486.666666666667
                (5 rows)



8. find number of orders placed each month

    query - SELECT 
                EXTRACT(MONTH FROM TO_DATE(date, 'YYYY-MM-DD')) AS month,
                EXTRACT(YEAR FROM TO_DATE(date, 'YYYY-MM-DD')) AS year,
                COUNT(*) AS num_orders
            FROM 
                bill
            GROUP BY 
                EXTRACT(MONTH FROM TO_DATE(date, 'YYYY-MM-DD')), 
                EXTRACT(YEAR FROM TO_DATE(date, 'YYYY-MM-DD'))
            ORDER BY 
                year, month;

                #EXTRACT(MONTH FROM TO_DATE(date, 'YYYY-MM-DD'))- extracts the month and TO_DATEspecifies the date format added to the column
        result -    month | year | num_orders 
                    ------+------+------------
                        8 | 2021 |          1
                        8 | 2022 |          2
                        8 | 2023 |          1
                        3 | 2024 |          2
                        (4 rows)


9. retrieve order that were placed before jan 1,2023

    query - SELECT * FROM bill
            WHERE date<'2023-01-01';
    result -      bill_id |    date    |        shipping_address        | total_bill | customer_id 
                 ---------+------------+--------------------------------+------------+-------------
                        1 | 2022-08-27 | 123 Main St, Cityville, CA     |       2150 |           1
                        7 | 2022-08-27 | 404 Birch St, Hilltown, PA     |        400 |           7
                       10 | 2021-08-29 | 707 Cherry St, Orchardtown, MI |        730 |          10
                (3 rows)


10. calculate the total quantity and revenue for each product category

    query - select c.category_id,c.title,count(pro.product_id) as no_of_products, avg(pro.price) as avg_pro_price 
            from category c
            join product pro on c.category_id = pro.category_id
            group by c.category_id , c.title
            order by c.category_id asc;
    result -  category_id |        title        | no_of_products | avg_pro_price 
             -------------+---------------------+----------------+---------------
                        2 | Mobile Phones       |              2 |           475
                        4 | Furniture           |              3 |           800
                        5 | Home Appliances     |              1 |           100
                        6 | Cameras             |              1 |          1500
                        8 | Printers & Scanners |              1 |           300
                        9 | Tablets             |              1 |           500
                       10 | Wearables           |              1 |           400
                       11 | Gaming              |              1 |           250
                       12 | Networking          |              1 |           400
                       13 | Monitors            |              1 |            80
                       14 | Storage             |              1 |           300
                       15 | Accessories         |              1 |           120
                (12 rows)




11. Find the top 5 customers who spent the most money on their bills.

        query - SELECT c.customer_id,name,bill_id,total_bill 
                FROM bill b JOIN customer c 
                ON b.customer_id = c.customer_id
                ORDER BY total_bill DESC
                LIMIT 5;

        result -      customer_id |      name      | bill_id | total_bill 
                     -------------+----------------+---------+------------
                                1 | Alice Johnson  |       1 |       2150
                                3 | Carol Williams |       3 |       2000
                               15 | Penny Garcia   |      15 |       1600
                               10 | Jack White     |      10 |        730
                               11 | Kate Anderson  |      11 |        420
                        (5 rows)



12. Show the names of products that have been reviewed by more than or equal to 2 customers.

        query - WITH reviews AS (
                SELECT p.name AS product_name ,COUNT(r.review_id) AS total_reviews 
                FROM product p JOIN review r 
                ON p.product_id = r.product_id
                GROUP BY p.name )
                SELECT product_name ,total_reviews
                FROM reviews 
                WHERE total_reviews>=2;

        result -        product_name | total_reviews 
                       --------------+---------------
                        Smartphone   |             2
                        Laptop       |             3
                        (2 rows)



13. Display the top 3 most expensive products for each brand.

        query - SELECT brand.title AS brand_name, product.name AS product_name, product.price AS product_price
                FROM (
                SELECT brand_id, name, price, 
                        ROW_NUMBER() OVER (PARTITION BY brand_id ORDER BY price DESC) AS rn
                FROM product
                ) AS product
                JOIN brand ON product.brand_id = brand.brand_id
                WHERE product.rn <= 3;

        result -         brand_name   |    product_name     | product_price 
                       ---------------+---------------------+---------------
                        Apple         | Desk                |           200
                        Apple         | Laptop              |          1200
                        Apple         | Watch               |           400
                        Bose          | Speaker             |           250
                        Dell          | Monitor             |           300
                        Herman Miller | Chair               |           100
                        Herman Miller | Camera              |          1000
                        HP            | Printer             |           300
                        IKEA          | Smartphone          |           800
                        Lenovo        | Tablet              |           500
                        LG            | TV                  |          1500
                        Microsoft     | Gaming Console      |           400
                        Seagate       | External Hard Drive |           120
                        Sony          | Headphones          |           150
                        TP-Link       | Router              |            80
                        (15 rows)

                #ROW_NUMBER(): This is a window function that assigns a unique sequential integer to each row within the partition. It starts from 1 for the first row in each partition and increments by 1 for each subsequent row.
                #OVER(): This clause defines the window within which the window function operates by specifying the partitioning and ordering of the rows within that window.
                #PARTITION BY brand_id: it groups rows with the same brand_id into separate partitions.
                #ORDER BY price DESC: This part of the statement specifies the order in which the rows are processed within each partition. 

14. Find the total number of customers.

        query - SELECT COUNT(customer_id) AS total_customers FROM customer;

        result -  total_customers 
                 -----------------
                                6
                (1 row)


15. Find the average number of products ordered per bill.

        query - WITH products AS (
                        SELECT COUNT(product_id) as total_products
                        FROM order_summary
                        GROUP BY bill_id
                )
                SELECT AVG(total_products) AS avg_products_ordered
                FROM products;

        result -        avg_products_ordered 
                        ----------------------
                        2.5000000000000000
                        (1 row)


16. List all products along with their descriptions and brands.

        query - SELECT p.name,p.description,b.title 
                FROM product p JOIN brand b
                ON p.brand_id = b.brand_id;

        result -       name         |                     description                     |     title     
               ---------------------+-----------------------------------------------------+---------------
                Laptop              | 15-inch laptop with Intel Core i7 processor         | Apple
                Desk                | Wooden desk with built-in drawers                   | Apple
                Camera              | Mirrorless camera with interchangeable lenses       | Herman Miller
                Headphones          | Wireless headphones with noise cancellation feature | Sony
                TV                  | 55-inch smart TV with 4K resolution                 | LG
                Printer             | Color inkjet printer with Wi-Fi connectivity        | HP
                Smartphone          | Latest model with 6.5-inch display and dual cameras | IKEA
                Chair               | Ergonomic chair with adjustable armrests            | Herman Miller
                Watch               | Smartwatch with heart rate monitor and GPS          | Apple
                Gaming Console      | Next-gen gaming console with 4K gaming support      | Microsoft
                External Hard Drive | 1TB portable hard drive with USB 3.0 interface      | Seagate
                Speaker             | Bluetooth speaker with 20 hours of battery life     | Bose
                Router              | Dual-band router with gigabit Ethernet ports        | TP-Link
                Monitor             | 24-inch monitor with IPS panel                      | Dell
                Tablet              | 10-inch tablet with quad-core processor             | Lenovo
                (15 rows)


17. Update the total bill amount for each bill acoording to the products in it.

        query - UPDATE bill
                SET total_bill = (
                        SELECT SUM(p.price) FROM order_summary o JOIN product p
                        ON o.product_id = p.product_id
                        WHERE o.bill_id=bill.bill_id
                )
                WHERE bill_id IN (1,3,7,10,11,15);

        result -  bill_id |    date    |        shipping_address        | total_bill | customer_id 
                 ---------+------------+--------------------------------+------------+-------------
                        1 | 2024-03-14 | 123 Main St, Cityville, CA     |       2150 |           1
                        3 | 2024-03-14 | 789 Oak St, Villagetown, TX    |       2000 |           3
                        7 | 2024-03-14 | 404 Birch St, Hilltown, PA     |        400 |           7
                       10 | 2024-03-14 | 707 Cherry St, Orchardtown, MI |        730 |          10
                       11 | 2024-03-14 | 808 Peach St, Beachside, CA    |        420 |          11
                       15 | 2024-03-14 | 1212 Orange St, Orangetown, TX |       1600 |          15
                (6 rows)

18. Show the customers who have not made any payments.

        query - SELECT c.name 
                FROM customer c LEFT JOIN payment p
                ON c.customer_id = p.payment_id
                WHERE p.payment_id IS NULL;

        result -      name     
                --------------
                Jack White
                Penny Garcia
                Aarzoo
                (3 rows)


19. Show the types of payment along with their descriptions.
        query - SELECT title,description 
                FROM payment_type;

        result -     title       |            description             
               ------------------+------------------------------------
                Credit Card      | Payment made using a credit card
                Debit Card       | Payment made using a debit card
                PayPal           | Payment made using PayPal account
                Cash on Delivery | Payment made in cash upon delivery
                Bank Transfer    | Payment made via bank transfer
                Cryptocurrency   | Payment made using cryptocurrency
                Gift Card        | Payment made using a gift card
                (7 rows)


20. List all products with their corresponding seller information (name and email).

        query - SELECT p.name as product, p.price as product_price,s.name as seller,s.phone_number as seller_phnno,s.email as seller_mail
                FROM product p JOIN seller s
                ON p.seller_id = s.seller_id;

        result -      product       | product_price |      seller      | seller_phnno |      seller_mail      
               ---------------------+---------------+------------------+--------------+-----------------------
                Laptop              |          1200 | Jane Smith       |   9876543210 | jane@example.com
                Desk                |           200 | David Lee        |   4444444444 | david@example.com
                Camera              |          1000 | Sarah Wilson     |   6666666666 | sarah@example.com
                Headphones          |           150 | James Garcia     |   7777777777 | james@example.com
                TV                  |          1500 | Jane Smith       |   9876543210 | jane@example.com
                Printer             |           300 | Emma Martinez    |   8888888888 | emma@example.com
                Smartphone          |           800 | Emily Brown      |   3333333333 | emily@example.com
                Chair               |           100 | Sarah Wilson     |   6666666666 | sarah@example.com
                Watch               |           400 | Olivia Hernandez |   2222222222 | olivia@example.com
                Gaming Console      |           400 | Sophia Gonzalez  |   7778889999 | sophia@example.com
                External Hard Drive |           120 | Mason Flores     |   5554443333 | mason@example.com
                Speaker             |           250 | Alexander Smith  |   1111111111 | alexander@example.com
                Router              |            80 | William Perez    |   3332221111 | william@example.com
                Monitor             |           300 | Isabella Torres  |   4443332222 | isabella@example.com
                Tablet              |           500 | Daniel Rodriguez |   9999999999 | daniel@example.com
                (15 rows)



21. Find the number of products in each category.

        query - SELECT c.category_id,c.title , COUNT(p.product_id) as total_products
                FROM category c JOIN product p
                ON c.category_id = p.category_id
                GROUP BY c.category_id
                ORDER BY c.category_id;

        result -      category_id |        title        | total_products 
                     -------------+---------------------+----------------
                                2 | Mobile Phones       |              2
                                4 | Furniture           |              3
                                5 | Home Appliances     |              1
                                6 | Cameras             |              1
                                8 | Printers & Scanners |              1
                                9 | Tablets             |              1
                               10 | Wearables           |              1
                               11 | Gaming              |              1
                               12 | Networking          |              1
                               13 | Monitors            |              1
                               14 | Storage             |              1
                               15 | Accessories         |              1
                      (12 rows)


22. Show the total number of reviews for each product.

        query - SELECT p.name, count(r.review_id) AS total_reviews
                FROM product p JOIN review r
                ON p.product_id = r.product_id
                GROUP BY p.name;

        result -       name         | total_reviews 
               ---------------------+---------------
                Smartphone          |             2
                Camera              |             1
                Chair               |             1
                Desk                |             1
                External Hard Drive |             1
                Router              |             1
                Gaming Console      |             1
                Laptop              |             3
                (8 rows)



23. Display the names and addresses of all customers along with their corresponding pin codes.

        query - SELECT c.name,a.house_number,a.sector,a.city,a.state,a.country,a.pincode
                FROM customer c JOIN address a
                ON c.address_id = a.address_id; 

        result -             name      | house_number |  sector  |    city     |    state     | country | pincode 
                       ----------------+--------------+----------+-------------+--------------+---------+---------
                        Alice Johnson  | 123          | Sector A | Cityville   | California   | USA     |   12345
                        Carol Williams | 789          | Sector C | Villagetown | Texas        | USA     |   34567
                        Aarzoo         | 404          | Sector G | Hilltown    | Pennsylvania | USA     |   78901
                        Grace Miller   | 404          | Sector G | Hilltown    | Pennsylvania | USA     |   78901
                        Jack White     | 707          | Sector J | Orchardtown | Michigan     | USA     |    1234
                        Kate Anderson  | 808          | Sector K | Beachside   | California   | USA     |   12340
                        Penny Garcia   | 1212         | Sector O | Orangetown  | Texas        | USA     |   56789
                        (7 rows)


24. List all products with their prices sorted in descending order.

        query - SELECT name, price
                FROM product
                ORDER BY price DESC;

        result -               name         | price 
                       ---------------------+-------
                        TV                  |  1500
                        Laptop              |  1200
                        Camera              |  1000
                        Smartphone          |   800
                        Tablet              |   500
                        Watch               |   400
                        Gaming Console      |   400
                        Printer             |   300
                        Monitor             |   300
                        Speaker             |   250
                        Desk                |   200
                        Headphones          |   150
                        External Hard Drive |   120
                        Chair               |   100
                        Router              |    80
                        (15 rows)


25. Show the total number of bills for each customer.

        query - SELECT c.name, count(b.bill_id)
                FROM customer c LEFT JOIN bill b 
                ON c.customer_id = b.customer_id
                GROUP BY c.name;

        result -             name      | count 
                       ----------------+-------
                        Carol Williams |     1
                        Aarzoo         |     0
                        Penny Garcia   |     1
                        Alice Johnson  |     1
                        Grace Miller   |     1
                        Kate Anderson  |     1
                        Jack White     |     1
                        (7 rows)


26. Display the names and descriptions of all products along with their corresponding brand.

        query - SELECT p.name,p.description,b.title
                FROM product p JOIN brand b
                ON p.brand_id = b.brand_id;

        result -               name         |                     description                     |     title     
                       ---------------------+-----------------------------------------------------+---------------
                        Laptop              | 15-inch laptop with Intel Core i7 processor         | Apple
                        Desk                | Wooden desk with built-in drawers                   | Apple
                        Camera              | Mirrorless camera with interchangeable lenses       | Herman Miller
                        Headphones          | Wireless headphones with noise cancellation feature | Sony
                        TV                  | 55-inch smart TV with 4K resolution                 | LG
                        Printer             | Color inkjet printer with Wi-Fi connectivity        | HP
                        Smartphone          | Latest model with 6.5-inch display and dual cameras | IKEA
                        Chair               | Ergonomic chair with adjustable armrests            | Herman Miller
                        Watch               | Smartwatch with heart rate monitor and GPS          | Apple
                        Gaming Console      | Next-gen gaming console with 4K gaming support      | Microsoft
                        External Hard Drive | 1TB portable hard drive with USB 3.0 interface      | Seagate
                        Speaker             | Bluetooth speaker with 20 hours of battery life     | Bose
                        Router              | Dual-band router with gigabit Ethernet ports        | TP-Link
                        Monitor             | 24-inch monitor with IPS panel                      | Dell
                        Tablet              | 10-inch tablet with quad-core processor             | Lenovo
                        (15 rows)


27. Find the average price of all products.

        query - SELECT AVG(price) FROM product;

        result -        avg        
                ------------------
                486.666666666667
                (1 row)


28. Show the names of products along with their corresponding sellers and brands.

        query - SELECT p.name,c.title,b.title
                FROM product p 
                JOIN brand b ON p.brand_id = b.brand_id
                JOIN category c ON p.category_id = c.category_id;

        result -               name         |        title        |     title     
                       ---------------------+---------------------+---------------
                        Laptop              | Furniture           | Apple
                        Desk                | Furniture           | Apple
                        Camera              | Furniture           | Herman Miller
                        Headphones          | Mobile Phones       | Sony
                        TV                  | Cameras             | LG
                        Printer             | Printers & Scanners | HP
                        Smartphone          | Mobile Phones       | IKEA
                        Chair               | Home Appliances     | Herman Miller
                        Watch               | Wearables           | Apple
                        Gaming Console      | Networking          | Microsoft
                        External Hard Drive | Accessories         | Seagate
                        Speaker             | Gaming              | Bose
                        Router              | Monitors            | TP-Link
                        Monitor             | Storage             | Dell
                        Tablet              | Tablets             | Lenovo
                        (15 rows)


29. List all customers who have made payments along with the payment types they used.

        query - SELECT c.name AS customer_name,p.payment_id , pt.title AS payment_type
                FROM payment p 
                JOIN customer c ON p.customer_id = c.customer_id
                JOIN payment_type pt ON p.type_id = pt.type_id;

        result -        customer_name  | payment_id |   payment_type   
                       ----------------+------------+------------------
                        Alice Johnson  |          1 | Credit Card
                        Alice Johnson  |          3 | PayPal
                        Kate Anderson  |          7 | Gift Card
                        Carol Williams |         10 | PayPal
                        Grace Miller   |         11 | Cash on Delivery
                        Alice Johnson  |         15 | Credit Card
                        (6 rows)


30. Display the names and descriptions of all brands along with the number of products they have.

        query - SELECT b.title,b.description,count(p.product_id) AS total_products
                FROM brand b JOIN product p
                ON b.brand_id = p.brand_id
                GROUP BY b.title,b.description;

        result -            title     |                         description                         | total_products 
                       ---------------+-------------------------------------------------------------+----------------
                        Apple         | Manufacturer of iPhones, iPads, and MacBooks                |              2
                        Sony          | Manufacturer of audio devices, cameras, and gaming consoles |              1
                        Herman Miller | Designer and manufacturer of ergonomic chairs and furniture |              2
                        IKEA          | Furniture retailer known for its modern designs             |              1
                        Lenovo        | Manufacturer of laptops, desktops, and tablets              |              1
                        LG            | Manufacturer of TVs, home appliances, and mobile devices    |              1
                        Apple         | Manufacturer of smartwatches and accessories                |              1
                        Microsoft     | Manufacturer of Xbox gaming consoles and software           |              1
                        HP            | Manufacturer of printers, laptops, and desktops             |              1
                        Bose          | Manufacturer of audio equipment and speakers                |              1
                        Dell          | Manufacturer of computers, monitors, and peripherals        |              1
                        TP-Link       | Manufacturer of networking equipment and devices            |              1
                        Seagate       | Manufacturer of hard drives and storage solutions           |              1
                        (13 rows)



# in this difficult questions were 9th and 13th



------------------------------------------------ADVANCE CONCEPT PRACTICE ---------------------------------------------------



FUNCTION - 
        
        BASIC SYNTAX -  CREATE OR REPLACE FUNCTION func_name(input datatype)
                        RETURNS return_datatype AS $$
                        DECLARE 
                                ----varables declared
                        BEGIN 
                                ----function logic;
                        END;
                        $$LANGUAGE plpgsql;

        QUESTION - FUNCTION THAT GIVES ALL INFORMATION ABOUT THE CUSTOMER INCLUDING ADDRESS

        QUERY - 
                CREATE OR REPLACE FUNCTION customer_info(id_input integer)
                RETURNS TABLE(name varchar,phone_number bigint, email varchar, address text)
                BEGIN
                        SELECT c.name,c.phone_number, CONCAT_WS(',',a.house_number,a.sector,a.city,a.state,a.country,a.pincode)
                        FROM customer c
                        JOIN address a
                        ON c.address_id = a.address_id
                        WHERE c.customer_id = id_input;
                END;
                $$ LANGUAGE plpgsql;

        TO FETCH - SELECT * FROM customer_info(1)

        RESULT -      name      | phone_number |       email       |                     address                      
                 ---------------+--------------+-------------------+--------------------------------------------------
                  Alice Johnson |   1234567890 | alice@example.com | 123, Sector A, Cityville, California, USA, 12345
                 (1 row)


TRIGGER - 

        BASIC SYNTAX -  FIRST CREATE FUNCTION
                        CREATE TRIGGER trigger_name
                        {AFTER|BEFORE|INSTEAD OF} {EVENT}
                        FOR EACH ROW | STATEMENT
                        EXECUTE PRODCEDURE name_of_function_to_be_executed();

        QUESTION - AUTOMATICALLY UPDATES THE TOTAL BILL WHEN NEW ENTRY /UPDATION/DELETION IN ORDER_SUMMARY

        QUERY - CREATE OR REPLACE FUNCTION update_bill()
                RETURNS TRIGGER AS $$
                BEGIN 
                        UPDATE bill
                        SET total_bill = (
                                SELECT SUM(p.price)
                                FROM order_summary o JOIN product p
                                ON o.product_id = p.product_id
                                WHERE o.bill_id = NEW.bill_id)
                                WHERE bill_id = NEW.bill_id;
                        RETURN NEW ;
                END;
                $$ LANGUAGE plpgsql;
                CREATE TRIGGER update_bill_trigger
                AFTER INSERT OR UPDATE OR DELETE ON order_summary
                FOR EACH ROW
                EXECUTE PROCEDURE update_bill();

        FETCH - insert into order_summary(bill_id,product_id)
                values (11,7);


        RESULT - 
                Before -  bill_id |    date    |        shipping_address        | total_bill | customer_id 
                         ---------+------------+--------------------------------+------------+-------------
                               11 | 2024-03-14 | 808 Peach St, Beachside, CA    |        420 |          11
                               15 | 2024-03-14 | 1212 Orange St, Orangetown, TX |       1600 |          15
                                1 | 2022-08-27 | 123 Main St, Cityville, CA     |       2150 |           1
                                7 | 2022-08-27 | 404 Birch St, Hilltown, PA     |        400 |           7
                                3 | 2023-08-27 | 789 Oak St, Villagetown, TX    |       2000 |           3
                               10 | 2021-08-29 | 707 Cherry St, Orchardtown, MI |        730 |          10
                        (6 rows)


                After -  bill_id |    date    |        shipping_address        | total_bill | customer_id 
                        ---------+------------+--------------------------------+------------+-------------
                              15 | 2024-03-14 | 1212 Orange St, Orangetown, TX |       1600 |          15
                               1 | 2022-08-27 | 123 Main St, Cityville, CA     |       2150 |           1
                               7 | 2022-08-27 | 404 Birch St, Hilltown, PA     |        400 |           7
                               3 | 2023-08-27 | 789 Oak St, Villagetown, TX    |       2000 |           3
                              10 | 2021-08-29 | 707 Cherry St, Orchardtown, MI |        730 |          10
                              11 | 2024-03-14 | 808 Peach St, Beachside, CA    |       1420 |          11
                        (6 rows)





